<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.4" jmeter="2.9 r1437961">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="TestData CSV" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">transactions.csv</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">id,cName,tType,oppName,bDate,sDate,eDate,mrr,asv,users,otr,reason,comments,rstatus,parent</stringProp>
      </CSVDataSet>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Manage package" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SERVERNAME" elementType="Argument">
            <stringProp name="Argument.name">SERVERNAME</stringProp>
            <stringProp name="Argument.value">${__P(baseURL)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="un" elementType="Argument">
            <stringProp name="Argument.name">un</stringProp>
            <stringProp name="Argument.value">${__P(username)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pwd" elementType="Argument">
            <stringProp name="Argument.name">pwd</stringProp>
            <stringProp name="Argument.value">${__P(password)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="st" elementType="Argument">
            <stringProp name="Argument.name">st</stringProp>
            <stringProp name="Argument.value">${__P(securityToken)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="managed" elementType="Argument">
            <stringProp name="Argument.name">managed</stringProp>
            <stringProp name="Argument.value">${__P(managed)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="currencySymbol" elementType="Argument">
            <stringProp name="Argument.name">currencySymbol</stringProp>
            <stringProp name="Argument.value">${__P(symbol)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(numberOfTransactions)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1380531531000</longProp>
        <longProp name="ThreadGroup.end_time">1380531531000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Login" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="un" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">un</stringProp>
                  <stringProp name="Argument.value">${un}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="width" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">width</stringProp>
                  <stringProp name="Argument.value">1366</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="height" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">height</stringProp>
                  <stringProp name="Argument.value">768</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="hasRememberUn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">hasRememberUn</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="startURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">startURL</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="loginURL" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">loginURL</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="loginType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">loginType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="useSecure" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">useSecure</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="local" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">local</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lt</stringProp>
                  <stringProp name="Argument.value">standard</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="qs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">qs</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">locale</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="oauth_token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">oauth_token</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="oauth_callback" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">oauth_callback</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="login" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">login</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="serverid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">serverid</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="display" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">display</stringProp>
                  <stringProp name="Argument.value">page</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${un}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pw</stringProp>
                  <stringProp name="Argument.value">${pwd}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Login" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Login</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">login.salesforce.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://login.salesforce.com/</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">true</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.gs.headless.util.Output;

Output out=new Output();
String headers=&quot;S-ASV,S-MRR,S-OTR,S-users,S-ARPU,S-OriginalContractDate,S-RenewalDate,Status,BookingDate,Booking Type,MRR,ASV,StartDate,EndDate,OTR,Users&quot;;
out.writeActuals(&quot;TID,AccountName&quot;,headers);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="inline" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">inline</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="transactionId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">transactionId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="customerId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">customerId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="orderType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">orderType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="callBackAfterSave" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">callBackAfterSave</stringProp>
                  <stringProp name="Argument.value">jbaraCallBackAfterTransactionFormSave</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="callBackAfterCancel" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">callBackAfterCancel</stringProp>
                  <stringProp name="Argument.value">jbaraCallBackAfterTransactionFormCancel</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/AllTransactions?sfdc.tabName=01r90000000NtCI</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSRF" enabled="true">
              <stringProp name="HtmlExtractor.refname">csrf</stringProp>
              <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateCSRF]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default">not found</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="MAC" enabled="true">
              <stringProp name="HtmlExtractor.refname">mac</stringProp>
              <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateMAC]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default">not found</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="state" enabled="true">
              <stringProp name="HtmlExtractor.refname">state</stringProp>
              <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewState]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default">not found</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="sv" enabled="true">
              <stringProp name="HtmlExtractor.refname">sv</stringProp>
              <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateVersion]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default">not found</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">true</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;pCustomer&quot;,vars.get(&quot;cName&quot;));</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="hiddenType" enabled="true">
              <stringProp name="HtmlExtractor.refname">hiddenType</stringProp>
              <stringProp name="HtmlExtractor.expr">input[class=hiddenTransBookingType]</stringProp>
              <stringProp name="HtmlExtractor.attribute">name</stringProp>
              <stringProp name="HtmlExtractor.default"></stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="formid" enabled="true">
              <stringProp name="HtmlExtractor.refname">formid</stringProp>
              <stringProp name="HtmlExtractor.expr">form[action*=TransactionForm]</stringProp>
              <stringProp name="HtmlExtractor.attribute">name</stringProp>
              <stringProp name="HtmlExtractor.default">not found</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="initid" enabled="true">
              <stringProp name="HtmlExtractor.refname">initid</stringProp>
              <stringProp name="HtmlExtractor.expr">form[action*=TransactionForm] &gt; script</stringProp>
              <stringProp name="HtmlExtractor.attribute">id</stringProp>
              <stringProp name="HtmlExtractor.default">not found</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="customerChangeId" enabled="true">
              <stringProp name="HtmlExtractor.refname">customerChangeId</stringProp>
              <stringProp name="HtmlExtractor.expr">form[action*=TransactionForm] &gt; script</stringProp>
              <stringProp name="HtmlExtractor.attribute">id</stringProp>
              <stringProp name="HtmlExtractor.default">not found</stringProp>
              <stringProp name="HtmlExtractor.match_number">5</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="saveClickedId" enabled="true">
              <stringProp name="HtmlExtractor.refname">saveClickedId</stringProp>
              <stringProp name="HtmlExtractor.expr">form[action*=TransactionForm] &gt; script</stringProp>
              <stringProp name="HtmlExtractor.attribute">id</stringProp>
              <stringProp name="HtmlExtractor.default">not found</stringProp>
              <stringProp name="HtmlExtractor.match_number">6</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="bTypeChangeId" enabled="true">
              <stringProp name="HtmlExtractor.refname">bTypeChangeId</stringProp>
              <stringProp name="HtmlExtractor.expr">form[action*=TransactionForm] &gt; script</stringProp>
              <stringProp name="HtmlExtractor.attribute">id</stringProp>
              <stringProp name="HtmlExtractor.default">not found</stringProp>
              <stringProp name="HtmlExtractor.match_number">2</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="confirmBox" enabled="true">
              <stringProp name="HtmlExtractor.refname">confirmBox</stringProp>
              <stringProp name="HtmlExtractor.expr">input[class=chkBoxconfirmationCheckBox]</stringProp>
              <stringProp name="HtmlExtractor.attribute">name</stringProp>
              <stringProp name="HtmlExtractor.default">not found</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="continue" enabled="true">
            <stringProp name="IfController.condition">&quot;${initid}&quot; != &quot;not found&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                    <stringProp name="Argument.value">_viewRoot</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="${formid}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">${formid}</stringProp>
                    <stringProp name="Argument.value">${formid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="${hiddenType}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">${hiddenType}</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                    <stringProp name="Argument.value">${state}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                    <stringProp name="Argument.value">${mac}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                    <stringProp name="Argument.value">${csrf}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="${initid}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">${initid}</stringProp>
                    <stringProp name="Argument.value">${initid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sv}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                  </elementProp>
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSRF" enabled="true">
                <stringProp name="HtmlExtractor.refname">csrf</stringProp>
                <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateCSRF]</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default">not found</stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="MAC" enabled="true">
                <stringProp name="HtmlExtractor.refname">mac</stringProp>
                <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateMAC]</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default">not found</stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="state" enabled="true">
                <stringProp name="HtmlExtractor.refname">state</stringProp>
                <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewState]</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default">not found</stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="New Business ID" enabled="true">
                <stringProp name="HtmlExtractor.refname">newbusinessid</stringProp>
                <stringProp name="HtmlExtractor.expr">select[class=jbaraDummyBookingOrderSelectCtrl] option:contains(New Business)</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Upsell ID" enabled="true">
                <stringProp name="HtmlExtractor.refname">upsellid</stringProp>
                <stringProp name="HtmlExtractor.expr">select[class=jbaraDummyBookingOrderSelectCtrl] option:contains(Upsell)</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CustomUpsell ID" enabled="true">
                <stringProp name="HtmlExtractor.refname">customupsellid</stringProp>
                <stringProp name="HtmlExtractor.expr">select[class=jbaraDummyBookingOrderSelectCtrl] option:contains(CustomUpsell)</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Downsell ID" enabled="true">
                <stringProp name="HtmlExtractor.refname">downsellid</stringProp>
                <stringProp name="HtmlExtractor.expr">select[class=jbaraDummyBookingOrderSelectCtrl] option:contains(Downsell)</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CustomDownsell ID" enabled="true">
                <stringProp name="HtmlExtractor.refname">customdownsellid</stringProp>
                <stringProp name="HtmlExtractor.expr">select[class=jbaraDummyBookingOrderSelectCtrl] option:contains(CustomDownsell)</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Debook ID" enabled="true">
                <stringProp name="HtmlExtractor.refname">debookid</stringProp>
                <stringProp name="HtmlExtractor.expr">select[class=jbaraDummyBookingOrderSelectCtrl] option:contains(Debook)</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CustomDebook ID" enabled="true">
                <stringProp name="HtmlExtractor.refname">customdebookid</stringProp>
                <stringProp name="HtmlExtractor.expr">select[class=jbaraDummyBookingOrderSelectCtrl] option:contains(CustomDebook)</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Renewal ID" enabled="true">
                <stringProp name="HtmlExtractor.refname">renewalid</stringProp>
                <stringProp name="HtmlExtractor.expr">select[class=jbaraDummyBookingOrderSelectCtrl] option:contains(Renewal)</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Churn ID" enabled="true">
                <stringProp name="HtmlExtractor.refname">churnid</stringProp>
                <stringProp name="HtmlExtractor.expr">select[class=jbaraDummyBookingOrderSelectCtrl] option:contains(Churn)</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="custComponentId" enabled="true">
                <stringProp name="HtmlExtractor.refname">custComponentId</stringProp>
                <stringProp name="HtmlExtractor.expr">input[id*=custComponentId]</stringProp>
                <stringProp name="HtmlExtractor.attribute">name</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="custLookupDisabledCustControl" enabled="true">
                <stringProp name="HtmlExtractor.refname">custLookupDisabledCustControl</stringProp>
                <stringProp name="HtmlExtractor.expr">input[id*=custLookupDisabledCustControl]</stringProp>
                <stringProp name="HtmlExtractor.attribute">name</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="custLookupHasDefaultCustomText" enabled="true">
                <stringProp name="HtmlExtractor.refname">custLookupHasDefaultCustomText</stringProp>
                <stringProp name="HtmlExtractor.expr">input[id*=custLookupHasDefaultCustomText]</stringProp>
                <stringProp name="HtmlExtractor.attribute">name</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="custLookupDefaultCustomText" enabled="true">
                <stringProp name="HtmlExtractor.refname">custLookupDefaultCustomText</stringProp>
                <stringProp name="HtmlExtractor.expr">input[id*=custLookupDefaultCustomText]</stringProp>
                <stringProp name="HtmlExtractor.attribute">name</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_cname_search" enabled="true">
                <stringProp name="HtmlExtractor.refname">input_cname_search</stringProp>
                <stringProp name="HtmlExtractor.expr">input[class*=customer-name-text]</stringProp>
                <stringProp name="HtmlExtractor.attribute">name</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_display_cname" enabled="true">
                <stringProp name="HtmlExtractor.refname">input_display_cname</stringProp>
                <stringProp name="HtmlExtractor.expr">input[class*=DummyDisplayCustomerName]</stringProp>
                <stringProp name="HtmlExtractor.attribute">name</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_cid" enabled="true">
                <stringProp name="HtmlExtractor.refname">input_cid</stringProp>
                <stringProp name="HtmlExtractor.expr">input[class=theHiddenCustomerId]</stringProp>
                <stringProp name="HtmlExtractor.attribute">name</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="select_opp" enabled="true">
                <stringProp name="HtmlExtractor.refname">select_opp</stringProp>
                <stringProp name="HtmlExtractor.expr">select[class=jbaraDummyOpportunitySelectCtrl]</stringProp>
                <stringProp name="HtmlExtractor.attribute">name</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="select_btype" enabled="true">
                <stringProp name="HtmlExtractor.refname">select_btype</stringProp>
                <stringProp name="HtmlExtractor.expr">select[class=jbaraDummyBookingOrderSelectCtrl]</stringProp>
                <stringProp name="HtmlExtractor.attribute">name</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_term" enabled="true">
                <stringProp name="HtmlExtractor.refname">input_term</stringProp>
                <stringProp name="HtmlExtractor.expr">input[class=fractionalTerm]</stringProp>
                <stringProp name="HtmlExtractor.attribute">name</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="text_area_comments" enabled="true">
                <stringProp name="HtmlExtractor.refname">text_area_comments</stringProp>
                <stringProp name="HtmlExtractor.expr">textarea[class*=transactionComments]</stringProp>
                <stringProp name="HtmlExtractor.attribute">name</stringProp>
                <stringProp name="HtmlExtractor.default"></stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="customSearchId" enabled="true">
                <stringProp name="HtmlExtractor.refname">customSearchId</stringProp>
                <stringProp name="HtmlExtractor.expr">input[id*=custLookupDefaultCustomText] + script</stringProp>
                <stringProp name="HtmlExtractor.attribute">id</stringProp>
                <stringProp name="HtmlExtractor.default">not found</stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              </HtmlExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">!(&quot;${success}&quot; == &quot;false&quot; &amp;&amp; (&quot;${cName}&quot; == &quot;${pCustomer}&quot;))</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="inline" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">inline</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="transactionId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">transactionId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="customerId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">customerId</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="orderType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">orderType</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="callBackAfterSave" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">callBackAfterSave</stringProp>
                  <stringProp name="Argument.value">jbaraCallBackAfterTransactionFormSave</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="callBackAfterCancel" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">callBackAfterCancel</stringProp>
                  <stringProp name="Argument.value">jbaraCallBackAfterTransactionFormCancel</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/AllTransactions?sfdc.tabName=01r90000000NtCI</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSRF" enabled="true">
              <stringProp name="HtmlExtractor.refname">csrf</stringProp>
              <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateCSRF]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default">not found</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="MAC" enabled="true">
              <stringProp name="HtmlExtractor.refname">mac</stringProp>
              <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateMAC]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default">not found</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="state" enabled="true">
              <stringProp name="HtmlExtractor.refname">state</stringProp>
              <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewState]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default">not found</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="sv" enabled="true">
              <stringProp name="HtmlExtractor.refname">sv</stringProp>
              <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateVersion]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default">not found</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">true</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;success&quot;,&quot;false&quot;);
vars.put(&quot;pCustomer&quot;,vars.get(&quot;cName&quot;));</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="formid" enabled="true">
              <stringProp name="HtmlExtractor.refname">formid</stringProp>
              <stringProp name="HtmlExtractor.expr">form[action*=TransactionForm]</stringProp>
              <stringProp name="HtmlExtractor.attribute">name</stringProp>
              <stringProp name="HtmlExtractor.default">not found</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="initid" enabled="true">
              <stringProp name="HtmlExtractor.refname">initid</stringProp>
              <stringProp name="HtmlExtractor.expr">form[action*=TransactionForm] &gt; script</stringProp>
              <stringProp name="HtmlExtractor.attribute">id</stringProp>
              <stringProp name="HtmlExtractor.default">not found</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="continue" enabled="true">
            <stringProp name="IfController.condition">&quot;${initid}&quot; != &quot;not found&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                    <stringProp name="Argument.value">_viewRoot</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="${formid}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">${formid}</stringProp>
                    <stringProp name="Argument.value">${formid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="${hiddenType}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">${hiddenType}</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                    <stringProp name="Argument.value">${state}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                    <stringProp name="Argument.value">${mac}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                    <stringProp name="Argument.value">${csrf}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="${initid}" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">${initid}</stringProp>
                    <stringProp name="Argument.value">${initid}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sv}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                  </elementProp>
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSRF" enabled="true">
                <stringProp name="HtmlExtractor.refname">csrf</stringProp>
                <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateCSRF]</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default">not found</stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="MAC" enabled="true">
                <stringProp name="HtmlExtractor.refname">mac</stringProp>
                <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateMAC]</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default">not found</stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="state" enabled="true">
                <stringProp name="HtmlExtractor.refname">state</stringProp>
                <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewState]</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.default">not found</stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
              </HtmlExtractor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="continue check" enabled="true">
              <stringProp name="IfController.condition">&quot;${customSearchId}&quot; != &quot;not found&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                      <stringProp name="Argument.value">_viewRoot</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="${formid}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">${formid}</stringProp>
                      <stringProp name="Argument.value">${formid}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="${hiddenType}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">${hiddenType}</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="${custComponentId}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">${custComponentId}</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">${input_cname_search}</stringProp>
                      <stringProp name="Argument.value">${cName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">${input_display_cname}</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="${input_cid}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">${input_cid}</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="${select_opp}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">${select_opp}</stringProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="${select_btype}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">${select_btype}</stringProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="${input_term}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">${input_term}</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">${text_area_comments}</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                      <stringProp name="Argument.value">${state}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                      <stringProp name="Argument.value">${sv}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                      <stringProp name="Argument.value">${mac}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                      <stringProp name="Argument.value">${csrf}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="${customSearchId}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">${customSearchId}</stringProp>
                      <stringProp name="Argument.value">${customSearchId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                    </elementProp>
                    <elementProp name="Pragma" elementType="Header">
                      <stringProp name="Header.name">Pragma</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">true</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
                                            vars.put(&quot;cid&quot;,&quot;0&quot;);
		Document document = Jsoup.parse(prev.getResponseDataAsString()); 
		Elements objects = document.select(&quot;a[class=customSearchRefined]:contains(&quot;+vars.get(&quot;cName&quot;)+&quot;)&quot;);
		String data=objects.get(0).attr(&quot;onclick&quot;);
		int lastIndex=data.lastIndexOf(&quot;&apos;&quot;);
		int startIndex=data.lastIndexOf(&quot;&apos;&quot;,lastIndex-12);
log.info(&quot;customer id is &quot;+ data.substring(startIndex+1,lastIndex) + &quot;--&quot;+lastIndex+&quot;--&quot;+startIndex);
		vars.put(&quot;cid&quot;,data.substring(startIndex+1,lastIndex));


</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="state" enabled="true">
                  <stringProp name="HtmlExtractor.refname">state</stringProp>
                  <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewState]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">value</stringProp>
                  <stringProp name="HtmlExtractor.default">not found</stringProp>
                  <stringProp name="HtmlExtractor.match_number">1</stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="MAC" enabled="true">
                  <stringProp name="HtmlExtractor.refname">mac</stringProp>
                  <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateMAC]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">value</stringProp>
                  <stringProp name="HtmlExtractor.default">not found</stringProp>
                  <stringProp name="HtmlExtractor.match_number">1</stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSRF" enabled="true">
                  <stringProp name="HtmlExtractor.refname">csrf</stringProp>
                  <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateCSRF]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">value</stringProp>
                  <stringProp name="HtmlExtractor.default">not found</stringProp>
                  <stringProp name="HtmlExtractor.match_number">1</stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                </HtmlExtractor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="customer search success check" enabled="true">
                <stringProp name="IfController.condition">&quot;${cid}&quot;!=&quot;0&quot; &amp;&amp; &quot;${cid}&quot;!=&quot;&quot; </stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                        <stringProp name="Argument.value">_viewRoot</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${formid}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">${formid}</stringProp>
                        <stringProp name="Argument.value">${formid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${hiddenType}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">${hiddenType}</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${custComponentId}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">${custComponentId}</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">${input_cname_search}</stringProp>
                        <stringProp name="Argument.value">${cName}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">${input_display_cname}</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${input_cid}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">${input_cid}</stringProp>
                        <stringProp name="Argument.value">${cid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${select_opp}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">${select_opp}</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${select_btype}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">${select_btype}</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${input_term}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">${input_term}</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">${text_area_comments}</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                        <stringProp name="Argument.value">${state}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                        <stringProp name="Argument.value">${sv}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                        <stringProp name="Argument.value">${mac}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                        <stringProp name="Argument.value">${csrf}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${customerChangeId}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">${customerChangeId}</stringProp>
                        <stringProp name="Argument.value">${customerChangeId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="paramTransactionCustomerId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">paramTransactionCustomerId</stringProp>
                        <stringProp name="Argument.value">${cid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                      </elementProp>
                      <elementProp name="Pragma" elementType="Header">
                        <stringProp name="Header.name">Pragma</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp name="Cache-Control" elementType="Header">
                        <stringProp name="Header.name">Cache-Control</stringProp>
                        <stringProp name="Header.value">no-cache</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="state" enabled="true">
                    <stringProp name="HtmlExtractor.refname">state</stringProp>
                    <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewState]</stringProp>
                    <stringProp name="HtmlExtractor.attribute">value</stringProp>
                    <stringProp name="HtmlExtractor.default">not found</stringProp>
                    <stringProp name="HtmlExtractor.match_number">1</stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="MAC" enabled="true">
                    <stringProp name="HtmlExtractor.refname">mac</stringProp>
                    <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateMAC]</stringProp>
                    <stringProp name="HtmlExtractor.attribute">value</stringProp>
                    <stringProp name="HtmlExtractor.default">not found</stringProp>
                    <stringProp name="HtmlExtractor.match_number">1</stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSRF" enabled="true">
                    <stringProp name="HtmlExtractor.refname">csrf</stringProp>
                    <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateCSRF]</stringProp>
                    <stringProp name="HtmlExtractor.attribute">value</stringProp>
                    <stringProp name="HtmlExtractor.default">not found</stringProp>
                    <stringProp name="HtmlExtractor.match_number">1</stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_mrr" enabled="false">
                    <stringProp name="HtmlExtractor.refname">input_mrr</stringProp>
                    <stringProp name="HtmlExtractor.expr">input[class=recurringMRR lineItemVal input-field]</stringProp>
                    <stringProp name="HtmlExtractor.attribute">name</stringProp>
                    <stringProp name="HtmlExtractor.default"></stringProp>
                    <stringProp name="HtmlExtractor.match_number">1</stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_asv" enabled="false">
                    <stringProp name="HtmlExtractor.refname">input_asv</stringProp>
                    <stringProp name="HtmlExtractor.expr">input[class=recurringASV lineItemVal input-field]</stringProp>
                    <stringProp name="HtmlExtractor.attribute">name</stringProp>
                    <stringProp name="HtmlExtractor.default"></stringProp>
                    <stringProp name="HtmlExtractor.match_number">1</stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_users" enabled="false">
                    <stringProp name="HtmlExtractor.refname">input_users</stringProp>
                    <stringProp name="HtmlExtractor.expr">input[class=lineItemVal lineItemUsers input-field]</stringProp>
                    <stringProp name="HtmlExtractor.attribute">name</stringProp>
                    <stringProp name="HtmlExtractor.default"></stringProp>
                    <stringProp name="HtmlExtractor.match_number">1</stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  </HtmlExtractor>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_otr" enabled="false">
                    <stringProp name="HtmlExtractor.refname">input_otr</stringProp>
                    <stringProp name="HtmlExtractor.expr">input[class=lineItemVal lineItemOnetimeRevenue input-field]</stringProp>
                    <stringProp name="HtmlExtractor.attribute">name</stringProp>
                    <stringProp name="HtmlExtractor.default"></stringProp>
                    <stringProp name="HtmlExtractor.match_number">1</stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  </HtmlExtractor>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Customer selection success" enabled="true">
                  <stringProp name="IfController.condition">&quot;${mac}&quot; != &quot;not found&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="New Business Transaction" enabled="true">
                    <stringProp name="IfController.condition">&quot;${tType}&quot; == &quot;New Business&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                            <stringProp name="Argument.value">_viewRoot</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}</stringProp>
                            <stringProp name="Argument.value">${formid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${hiddenType}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${hiddenType}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custComponentId}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custComponentId}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_cname_search}</stringProp>
                            <stringProp name="Argument.value">${cName}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_display_cname}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_cid}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_cid}</stringProp>
                            <stringProp name="Argument.value">${cid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${select_opp}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${select_opp}</stringProp>
                            <stringProp name="Argument.value">0</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${select_btype}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${select_btype}</stringProp>
                            <stringProp name="Argument.value">${newbusinessid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                            <stringProp name="Argument.value">10/18/2013</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                            <stringProp name="Argument.value">10/18/2013</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_term}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_term}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${text_area_comments}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                            <stringProp name="Argument.value">${state}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                            <stringProp name="Argument.value">${sv}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                            <stringProp name="Argument.value">${mac}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                            <stringProp name="Argument.value">${csrf}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="jbBTId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">jbBTId</stringProp>
                            <stringProp name="Argument.value">${newbusinessid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${bTypeChangeId}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${bTypeChangeId}</stringProp>
                            <stringProp name="Argument.value">${bTypeChangeId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                      <stringProp name="HTTPSampler.port">443</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                          </elementProp>
                          <elementProp name="Pragma" elementType="Header">
                            <stringProp name="Header.name">Pragma</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Cache-Control" elementType="Header">
                            <stringProp name="Header.name">Cache-Control</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSRF" enabled="true">
                        <stringProp name="HtmlExtractor.refname">csrf</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateCSRF]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="MAC" enabled="true">
                        <stringProp name="HtmlExtractor.refname">mac</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateMAC]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="state" enabled="true">
                        <stringProp name="HtmlExtractor.refname">state</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewState]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_mrr" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_mrr</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=recurringMRR lineItemVal input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_asv" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_asv</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=recurringASV lineItemVal input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_users" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_users</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=lineItemVal lineItemUsers input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_otr" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_otr</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=lineItemVal lineItemOnetimeRevenue input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                      <stringProp name="IfController.condition">&quot;${input_mrr}&quot; != &quot;&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                              <stringProp name="Argument.value">_viewRoot</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}</stringProp>
                              <stringProp name="Argument.value">${formid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${hiddenType}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${hiddenType}</stringProp>
                              <stringProp name="Argument.value">New Business</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custComponentId}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custComponentId}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_cname_search}</stringProp>
                              <stringProp name="Argument.value">${cName}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_display_cname}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_cid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_cid}</stringProp>
                              <stringProp name="Argument.value">${cid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${select_opp}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${select_opp}</stringProp>
                              <stringProp name="Argument.value">0</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${select_btype}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${select_btype}</stringProp>
                              <stringProp name="Argument.value">${newbusinessid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                              <stringProp name="Argument.value">${bDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                              <stringProp name="Argument.value">${sDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                              <stringProp name="Argument.value">${eDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_term}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_term}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_mrr}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_mrr}</stringProp>
                              <stringProp name="Argument.value">${mrr}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_asv}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_asv}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_users}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_users}</stringProp>
                              <stringProp name="Argument.value">${users}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_otr}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_otr}</stringProp>
                              <stringProp name="Argument.value">${otr}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${text_area_comments}</stringProp>
                              <stringProp name="Argument.value">${comments}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                              <stringProp name="Argument.value">${state}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                              <stringProp name="Argument.value">${sv}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                              <stringProp name="Argument.value">${mac}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                              <stringProp name="Argument.value">${csrf}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${saveClickedId}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${saveClickedId}</stringProp>
                              <stringProp name="Argument.value">${saveClickedId}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                        <stringProp name="HTTPSampler.port">443</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                        <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                            </elementProp>
                            <elementProp name="Pragma" elementType="Header">
                              <stringProp name="Header.name">Pragma</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Cache-Control" elementType="Header">
                              <stringProp name="Header.name">Cache-Control</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate</stringProp>
                            </elementProp>
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                          <boolProp name="resetInterpreter">true</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

Document document = Jsoup.parse(prev.getResponseDataAsString()); 

String error=document.select(&quot;span[id*=jbaraTransactionErrorMessages]&quot;).get(0).text();
if ( error !=null || error.length() == 0){
vars.put(&quot;success&quot;,&quot;true&quot;);
}</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Upsell" enabled="true">
                    <stringProp name="IfController.condition">&quot;${tType}&quot; == &quot;Upsell&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                            <stringProp name="Argument.value">_viewRoot</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}</stringProp>
                            <stringProp name="Argument.value">${formid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${hiddenType}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${hiddenType}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custComponentId}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custComponentId}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_cname_search}</stringProp>
                            <stringProp name="Argument.value">${cName}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_display_cname}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_cid}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_cid}</stringProp>
                            <stringProp name="Argument.value">${cid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${select_opp}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${select_opp}</stringProp>
                            <stringProp name="Argument.value">0</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${select_btype}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${select_btype}</stringProp>
                            <stringProp name="Argument.value">${upsellid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                            <stringProp name="Argument.value">10/18/2013</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                            <stringProp name="Argument.value">10/18/2013</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_term}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_term}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${text_area_comments}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                            <stringProp name="Argument.value">${state}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                            <stringProp name="Argument.value">${sv}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                            <stringProp name="Argument.value">${mac}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                            <stringProp name="Argument.value">${csrf}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="jbBTId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">jbBTId</stringProp>
                            <stringProp name="Argument.value">${upsellid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${bTypeChangeId}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${bTypeChangeId}</stringProp>
                            <stringProp name="Argument.value">${bTypeChangeId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                      <stringProp name="HTTPSampler.port">443</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                          </elementProp>
                          <elementProp name="Pragma" elementType="Header">
                            <stringProp name="Header.name">Pragma</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Cache-Control" elementType="Header">
                            <stringProp name="Header.name">Cache-Control</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">true</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import java.text.DecimalFormat;

String currencyFormat(String amt) {
		DecimalFormat moneyFormat = new DecimalFormat(&quot;###,###&quot;);
		return moneyFormat.format(new Long(amt));
	}

Document doc = Jsoup.parse(prev.getResponseDataAsString()); 
String symbol = vars.get(&quot;currencySymbol&quot;);
String parentTran = vars.get(&quot;parent&quot;);
String[] attrs = parentTran.split(&quot;,&quot;);
		String MRR = attrs[0];
		String ASV = attrs[1];
		String endDate = attrs[2];
		String text1 = &quot;%s %s, ASV:%s %s&quot;;

		String query1 = String.format(text1, new Object[]{symbol, currencyFormat(MRR),
					symbol, currencyFormat(ASV)});
		String query2 = &quot;End Date:&quot; + endDate;
		String query3 = &quot;End Date: &quot; + endDate;
		 Elements els=doc.select(&quot;span[class=parentTransactionListToAssociate]:contains(&quot;+query1+&quot;):contains(&quot;+query2+&quot;) input&quot;);
		 if (els.size()==0){
			 els=doc.select(&quot;span[class=parentTransactionListToAssociate]:contains(&quot;+query1+&quot;):contains(&quot;+query3+&quot;) input&quot;);
		 }
vars.put(&quot;pid&quot;,els.get(0).attr(&quot;value&quot;));

</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSRF" enabled="true">
                        <stringProp name="HtmlExtractor.refname">csrf</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateCSRF]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="MAC" enabled="true">
                        <stringProp name="HtmlExtractor.refname">mac</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateMAC]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="state" enabled="true">
                        <stringProp name="HtmlExtractor.refname">state</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewState]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="hidden_pid" enabled="true">
                        <stringProp name="HtmlExtractor.refname">hidden_pid</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=hiddenParentId]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_mrr" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_mrr</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=recurringMRR lineItemVal input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_asv" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_asv</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=recurringASV lineItemVal input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_users" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_users</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=lineItemVal lineItemUsers input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_otr" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_otr</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=lineItemVal lineItemOnetimeRevenue input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="New Upsell" enabled="true">
                      <stringProp name="IfController.condition">&quot;${parent}&quot;  == &quot;&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                              <stringProp name="Argument.value">_viewRoot</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}</stringProp>
                              <stringProp name="Argument.value">${formid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${hiddenType}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${hiddenType}</stringProp>
                              <stringProp name="Argument.value">Upsell</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custComponentId}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custComponentId}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_cname_search}</stringProp>
                              <stringProp name="Argument.value">${cName}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_display_cname}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_cid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_cid}</stringProp>
                              <stringProp name="Argument.value">${cid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${select_opp}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${select_opp}</stringProp>
                              <stringProp name="Argument.value">0</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${select_btype}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${select_btype}</stringProp>
                              <stringProp name="Argument.value">${upsellid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ParentAssociation" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">ParentAssociation</stringProp>
                              <stringProp name="Argument.value">new</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${hidden_pid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${hidden_pid}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                              <stringProp name="Argument.value">${bDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                              <stringProp name="Argument.value">${sDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                              <stringProp name="Argument.value">${eDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_term}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_term}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_mrr}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_mrr}</stringProp>
                              <stringProp name="Argument.value">${mrr}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_asv}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_asv}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_users}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_users}</stringProp>
                              <stringProp name="Argument.value">${users}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_otr}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_otr}</stringProp>
                              <stringProp name="Argument.value">${otr}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${text_area_comments}</stringProp>
                              <stringProp name="Argument.value">${comments}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                              <stringProp name="Argument.value">${state}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                              <stringProp name="Argument.value">${sv}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                              <stringProp name="Argument.value">${mac}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                              <stringProp name="Argument.value">${csrf}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${saveClickedId}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${saveClickedId}</stringProp>
                              <stringProp name="Argument.value">${saveClickedId}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                        <stringProp name="HTTPSampler.port">443</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                        <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                            </elementProp>
                            <elementProp name="Pragma" elementType="Header">
                              <stringProp name="Header.name">Pragma</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Cache-Control" elementType="Header">
                              <stringProp name="Header.name">Cache-Control</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate</stringProp>
                            </elementProp>
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                          <boolProp name="resetInterpreter">true</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

Document document = Jsoup.parse(prev.getResponseDataAsString()); 

String error=document.select(&quot;span[id*=jbaraTransactionErrorMessages]&quot;).get(0).text();
if ( error.length() == 0){
vars.put(&quot;success&quot;,&quot;true&quot;);
}</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="existing" enabled="true">
                      <stringProp name="IfController.condition">&quot;${parent}&quot;  != &quot;&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">&quot;${pid}&quot;  != &quot;null&quot;</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                                <stringProp name="Argument.value">_viewRoot</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${formid}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${formid}</stringProp>
                                <stringProp name="Argument.value">${formid}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${hiddenType}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${hiddenType}</stringProp>
                                <stringProp name="Argument.value">Upsell</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${custComponentId}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${custComponentId}</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${input_cname_search}</stringProp>
                                <stringProp name="Argument.value">${cName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${input_display_cname}</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${input_cid}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${input_cid}</stringProp>
                                <stringProp name="Argument.value">${cid}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${select_opp}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${select_opp}</stringProp>
                                <stringProp name="Argument.value">0</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${select_btype}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${select_btype}</stringProp>
                                <stringProp name="Argument.value">${upsellid}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="ParentAssociation" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">ParentAssociation</stringProp>
                                <stringProp name="Argument.value">existing</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="parentTransaction" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">parentTransaction</stringProp>
                                <stringProp name="Argument.value">${pid}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${hidden_pid}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${hidden_pid}</stringProp>
                                <stringProp name="Argument.value">${pid}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                                <stringProp name="Argument.value">${bDate}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                                <stringProp name="Argument.value">${sDate}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                                <stringProp name="Argument.value">${eDate}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${input_term}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${input_term}</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${input_mrr}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${input_mrr}</stringProp>
                                <stringProp name="Argument.value">${mrr}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${input_asv}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${input_asv}</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${input_users}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${input_users}</stringProp>
                                <stringProp name="Argument.value">${users}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${input_otr}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${input_otr}</stringProp>
                                <stringProp name="Argument.value">${otr}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${text_area_comments}</stringProp>
                                <stringProp name="Argument.value">${comments}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                                <stringProp name="Argument.value">${state}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                                <stringProp name="Argument.value">${sv}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                                <stringProp name="Argument.value">${mac}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                                <stringProp name="Argument.value">${csrf}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${saveClickedId}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${saveClickedId}</stringProp>
                                <stringProp name="Argument.value">${saveClickedId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                          <stringProp name="HTTPSampler.port">443</stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                          <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Content-Type" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                              </elementProp>
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                              </elementProp>
                              <elementProp name="Pragma" elementType="Header">
                                <stringProp name="Header.name">Pragma</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="Cache-Control" elementType="Header">
                                <stringProp name="Header.name">Cache-Control</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate</stringProp>
                              </elementProp>
                              <elementProp name="Referer" elementType="Header">
                                <stringProp name="Header.name">Referer</stringProp>
                                <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                            <boolProp name="resetInterpreter">true</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

Document document = Jsoup.parse(prev.getResponseDataAsString()); 

String error=document.select(&quot;span[id*=jbaraTransactionErrorMessages]&quot;).get(0).text();
if ( error.length() == 0){
vars.put(&quot;success&quot;,&quot;true&quot;);
}</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CustomUpsell" enabled="true">
                    <stringProp name="IfController.condition">&quot;${tType}&quot; == &quot;CustomUpsell&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">true</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                            <stringProp name="Argument.value">_viewRoot</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}</stringProp>
                            <stringProp name="Argument.value">${formid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${hiddenType}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${hiddenType}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custComponentId}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custComponentId}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_cname_search}</stringProp>
                            <stringProp name="Argument.value">${cName}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_display_cname}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_cid}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_cid}</stringProp>
                            <stringProp name="Argument.value">${cid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${select_opp}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${select_opp}</stringProp>
                            <stringProp name="Argument.value">0</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${select_btype}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${select_btype}</stringProp>
                            <stringProp name="Argument.value">${customupsellid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                            <stringProp name="Argument.value">10/18/2013</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                            <stringProp name="Argument.value">10/18/2013</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_term}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_term}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${text_area_comments}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                            <stringProp name="Argument.value">${state}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                            <stringProp name="Argument.value">${sv}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                            <stringProp name="Argument.value">${mac}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                            <stringProp name="Argument.value">${csrf}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="jbBTId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">jbBTId</stringProp>
                            <stringProp name="Argument.value">${upsellid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${bTypeChangeId}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${bTypeChangeId}</stringProp>
                            <stringProp name="Argument.value">${bTypeChangeId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                      <stringProp name="HTTPSampler.port">443</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                          </elementProp>
                          <elementProp name="Pragma" elementType="Header">
                            <stringProp name="Header.name">Pragma</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Cache-Control" elementType="Header">
                            <stringProp name="Header.name">Cache-Control</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">true</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import java.text.DecimalFormat;

String currencyFormat(String amt) {
		DecimalFormat moneyFormat = new DecimalFormat(&quot;###,###&quot;);
		return moneyFormat.format(new Long(amt));
	}

Document doc = Jsoup.parse(prev.getResponseDataAsString()); 
String symbol = vars.get(&quot;currencySymbol&quot;);
String parentTran = vars.get(&quot;parent&quot;);
String[] attrs = parentTran.split(&quot;,&quot;);
		String MRR = attrs[0];
		String ASV = attrs[1];
		String endDate = attrs[2];
		String text1 = &quot;%s %s, ASV:%s %s&quot;;

		String query1 = String.format(text1, new Object[]{symbol, currencyFormat(MRR),
					symbol, currencyFormat(ASV)});
		String query2 = &quot;End Date:&quot; + endDate;
		String query3 = &quot;End Date: &quot; + endDate;
		 Elements els=doc.select(&quot;span[class=parentTransactionListToAssociate]:contains(&quot;+query1+&quot;):contains(&quot;+query2+&quot;) input&quot;);
		 if (els.size()==0){
			 els=doc.select(&quot;span[class=parentTransactionListToAssociate]:contains(&quot;+query1+&quot;):contains(&quot;+query3+&quot;) input&quot;);
		 }
vars.put(&quot;pid&quot;,els.get(0).attr(&quot;value&quot;));

</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSRF" enabled="true">
                        <stringProp name="HtmlExtractor.refname">csrf</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateCSRF]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="MAC" enabled="true">
                        <stringProp name="HtmlExtractor.refname">mac</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateMAC]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="state" enabled="true">
                        <stringProp name="HtmlExtractor.refname">state</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewState]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="hidden_pid" enabled="true">
                        <stringProp name="HtmlExtractor.refname">hidden_pid</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=hiddenParentId]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_mrr" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_mrr</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=recurringMRR lineItemVal input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_asv" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_asv</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=recurringASV lineItemVal input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_users" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_users</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=lineItemVal lineItemUsers input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_otr" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_otr</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=lineItemVal lineItemOnetimeRevenue input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="New Upsell" enabled="true">
                      <stringProp name="IfController.condition">&quot;${parent}&quot;  == &quot;&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                              <stringProp name="Argument.value">_viewRoot</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}</stringProp>
                              <stringProp name="Argument.value">${formid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${hiddenType}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${hiddenType}</stringProp>
                              <stringProp name="Argument.value">CustomUpsell</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custComponentId}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custComponentId}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_cname_search}</stringProp>
                              <stringProp name="Argument.value">${cName}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_display_cname}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_cid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_cid}</stringProp>
                              <stringProp name="Argument.value">${cid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${select_opp}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${select_opp}</stringProp>
                              <stringProp name="Argument.value">0</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${select_btype}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${select_btype}</stringProp>
                              <stringProp name="Argument.value">${customupsellid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ParentAssociation" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">ParentAssociation</stringProp>
                              <stringProp name="Argument.value">new</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${hidden_pid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${hidden_pid}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                              <stringProp name="Argument.value">${bDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                              <stringProp name="Argument.value">${sDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                              <stringProp name="Argument.value">${eDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_term}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_term}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_mrr}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_mrr}</stringProp>
                              <stringProp name="Argument.value">${mrr}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_asv}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_asv}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_users}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_users}</stringProp>
                              <stringProp name="Argument.value">${users}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_otr}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_otr}</stringProp>
                              <stringProp name="Argument.value">${otr}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${text_area_comments}</stringProp>
                              <stringProp name="Argument.value">${comments}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                              <stringProp name="Argument.value">${state}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                              <stringProp name="Argument.value">${sv}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                              <stringProp name="Argument.value">${mac}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                              <stringProp name="Argument.value">${csrf}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${saveClickedId}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${saveClickedId}</stringProp>
                              <stringProp name="Argument.value">${saveClickedId}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                        <stringProp name="HTTPSampler.port">443</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                        <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                            </elementProp>
                            <elementProp name="Pragma" elementType="Header">
                              <stringProp name="Header.name">Pragma</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Cache-Control" elementType="Header">
                              <stringProp name="Header.name">Cache-Control</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate</stringProp>
                            </elementProp>
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                          <boolProp name="resetInterpreter">true</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

Document document = Jsoup.parse(prev.getResponseDataAsString()); 

String error=document.select(&quot;span[id*=jbaraTransactionErrorMessages]&quot;).get(0).text();
if ( error.length() == 0){
vars.put(&quot;success&quot;,&quot;true&quot;);
}</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="existing" enabled="true">
                      <stringProp name="IfController.condition">&quot;${parent}&quot;  != &quot;&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">&quot;${pid}&quot;  != &quot;null&quot;</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                                <stringProp name="Argument.value">_viewRoot</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${formid}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${formid}</stringProp>
                                <stringProp name="Argument.value">${formid}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${hiddenType}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${hiddenType}</stringProp>
                                <stringProp name="Argument.value">CustomUpsell</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${custComponentId}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${custComponentId}</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                                <stringProp name="Argument.value">false</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${input_cname_search}</stringProp>
                                <stringProp name="Argument.value">${cName}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${input_display_cname}</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${input_cid}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${input_cid}</stringProp>
                                <stringProp name="Argument.value">${cid}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${select_opp}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${select_opp}</stringProp>
                                <stringProp name="Argument.value">0</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${select_btype}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${select_btype}</stringProp>
                                <stringProp name="Argument.value">${customupsellid}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="ParentAssociation" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">ParentAssociation</stringProp>
                                <stringProp name="Argument.value">existing</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="parentTransaction" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">parentTransaction</stringProp>
                                <stringProp name="Argument.value">${pid}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${hidden_pid}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${hidden_pid}</stringProp>
                                <stringProp name="Argument.value">${pid}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                                <stringProp name="Argument.value">${bDate}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                                <stringProp name="Argument.value">${sDate}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                                <stringProp name="Argument.value">${eDate}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${input_term}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${input_term}</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${input_mrr}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${input_mrr}</stringProp>
                                <stringProp name="Argument.value">${mrr}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${input_asv}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${input_asv}</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${input_users}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${input_users}</stringProp>
                                <stringProp name="Argument.value">${users}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${input_otr}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${input_otr}</stringProp>
                                <stringProp name="Argument.value">${otr}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${text_area_comments}</stringProp>
                                <stringProp name="Argument.value">${comments}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                                <stringProp name="Argument.value">${state}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                                <stringProp name="Argument.value">${sv}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                                <stringProp name="Argument.value">${mac}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                                <stringProp name="Argument.value">${csrf}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="${saveClickedId}" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">${saveClickedId}</stringProp>
                                <stringProp name="Argument.value">${saveClickedId}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                          <stringProp name="HTTPSampler.port">443</stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                          <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Content-Type" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                              </elementProp>
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                              </elementProp>
                              <elementProp name="Pragma" elementType="Header">
                                <stringProp name="Header.name">Pragma</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="Cache-Control" elementType="Header">
                                <stringProp name="Header.name">Cache-Control</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate</stringProp>
                              </elementProp>
                              <elementProp name="Referer" elementType="Header">
                                <stringProp name="Header.name">Referer</stringProp>
                                <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                            <boolProp name="resetInterpreter">true</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

Document document = Jsoup.parse(prev.getResponseDataAsString()); 

String error=document.select(&quot;span[id*=jbaraTransactionErrorMessages]&quot;).get(0).text();
if ( error.length() == 0){
vars.put(&quot;success&quot;,&quot;true&quot;);
}</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Renewal" enabled="true">
                    <stringProp name="IfController.condition">&quot;${tType}&quot; == &quot;Renewal&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                            <stringProp name="Argument.value">_viewRoot</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}</stringProp>
                            <stringProp name="Argument.value">${formid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${hiddenType}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${hiddenType}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custComponentId}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custComponentId}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_cname_search}</stringProp>
                            <stringProp name="Argument.value">${cName}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_display_cname}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_cid}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_cid}</stringProp>
                            <stringProp name="Argument.value">${cid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${select_opp}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${select_opp}</stringProp>
                            <stringProp name="Argument.value">0</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${select_btype}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${select_btype}</stringProp>
                            <stringProp name="Argument.value">${renewalid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                            <stringProp name="Argument.value">10/18/2013</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                            <stringProp name="Argument.value">10/18/2013</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_term}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_term}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${text_area_comments}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                            <stringProp name="Argument.value">${state}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                            <stringProp name="Argument.value">${sv}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                            <stringProp name="Argument.value">${mac}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                            <stringProp name="Argument.value">${csrf}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="jbBTId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">jbBTId</stringProp>
                            <stringProp name="Argument.value">${renewalid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${bTypeChangeId}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${bTypeChangeId}</stringProp>
                            <stringProp name="Argument.value">${bTypeChangeId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                      <stringProp name="HTTPSampler.port">443</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                          </elementProp>
                          <elementProp name="Pragma" elementType="Header">
                            <stringProp name="Header.name">Pragma</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Cache-Control" elementType="Header">
                            <stringProp name="Header.name">Cache-Control</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSRF" enabled="true">
                        <stringProp name="HtmlExtractor.refname">csrf</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateCSRF]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="MAC" enabled="true">
                        <stringProp name="HtmlExtractor.refname">mac</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateMAC]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="state" enabled="true">
                        <stringProp name="HtmlExtractor.refname">state</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewState]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">true</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import java.text.DecimalFormat;

String currencyFormat(String amt) {
		DecimalFormat moneyFormat = new DecimalFormat(&quot;###,###&quot;);
		return moneyFormat.format(new Long(amt));
	}

Document doc = Jsoup.parse(prev.getResponseDataAsString()); 

	String symbol = vars.get(&quot;currencySymbol&quot;);
		String[] parentTrans= vars.get(&quot;parent&quot;).split(&quot;:&quot;);
		String names = &quot;&quot;;
		boolean flag = true;
		for (String parentTran : parentTrans) {
			String[] attrs = parentTran.trim().split(&quot;,&quot;);
			String MRR = attrs[0];
			String ASV = attrs[1];
			String endDate = attrs[2];
			String text1 = &quot;%s %s, ASV:%s %s&quot;;
			
			String query1 = String.format(text1, new Object[]{symbol, currencyFormat(MRR),
					symbol, currencyFormat(ASV)});
			String query2 = &quot;End Date:&quot; + endDate;
			String query3 = &quot;End Date: &quot; + endDate;
			
			Elements els = doc.select(&quot;span:containsOwn(Transaction(s) to renew:)&quot;);
			Element parent = els.get(0).parent();
			String text = parent.text();
			Elements inputs = parent.select(&quot;input&quot;);
			String[] transactions = text.split(&quot;MRR:&quot;);
			int index = 0;
			for (String tran : transactions) {
				if (tran.contains(query1)
						&amp;&amp; (tran.contains(query2) || tran.contains(query3))) {
					if (flag) {
						names = names + inputs.get(index - 1).attr(&quot;name&quot;);
						flag = false;
					} else {
						names = names + &quot;,&quot;
								+ inputs.get(index - 1).attr(&quot;name&quot;);
					}
				}
				index++;
			}
		}
log.info(names);
vars.put(&quot;pname&quot;,names);



</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_mrr" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_mrr</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=recurringMRR lineItemVal input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_asv" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_asv</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=recurringASV lineItemVal input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_users" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_users</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=lineItemVal lineItemUsers input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_otr" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_otr</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=lineItemVal lineItemOnetimeRevenue input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                      <stringProp name="IfController.condition">&quot;${pname}&quot; != null</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                              <stringProp name="Argument.value">_viewRoot</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}</stringProp>
                              <stringProp name="Argument.value">${formid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${hiddenType}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${hiddenType}</stringProp>
                              <stringProp name="Argument.value">Renewal</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custComponentId}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custComponentId}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_cname_search}</stringProp>
                              <stringProp name="Argument.value">${cName}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_display_cname}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_cid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_cid}</stringProp>
                              <stringProp name="Argument.value">${cid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${select_opp}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${select_opp}</stringProp>
                              <stringProp name="Argument.value">0</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${select_btype}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${select_btype}</stringProp>
                              <stringProp name="Argument.value">${renewalid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                              <stringProp name="Argument.value">${bDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                              <stringProp name="Argument.value">${sDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                              <stringProp name="Argument.value">${eDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_term}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_term}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_mrr}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_mrr}</stringProp>
                              <stringProp name="Argument.value">${mrr}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_asv}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_asv}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_users}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_users}</stringProp>
                              <stringProp name="Argument.value">${users}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_otr}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_otr}</stringProp>
                              <stringProp name="Argument.value">${otr}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${text_area_comments}</stringProp>
                              <stringProp name="Argument.value">${comments}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                              <stringProp name="Argument.value">${state}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                              <stringProp name="Argument.value">${sv}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                              <stringProp name="Argument.value">${mac}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                              <stringProp name="Argument.value">${csrf}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${saveClickedId}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${saveClickedId}</stringProp>
                              <stringProp name="Argument.value">${saveClickedId}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                        <stringProp name="HTTPSampler.port">443</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                        <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                            </elementProp>
                            <elementProp name="Pragma" elementType="Header">
                              <stringProp name="Header.name">Pragma</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Cache-Control" elementType="Header">
                              <stringProp name="Header.name">Cache-Control</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate</stringProp>
                            </elementProp>
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
                          <stringProp name="scriptLanguage">beanshell</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">import org.apache.jmeter.protocol.http.util.HTTPArgument;

String pname=vars.get(&quot;pname&quot;);
String[] names=pname.split(&quot;,&quot;);
for(String name: names){
if(name !=null){
HTTPArgument arm=new HTTPArgument(name,&quot;on&quot;);
sampler.getArguments().addArgument(arm);
}
}</stringProp>
                        </BSFPreProcessor>
                        <hashTree/>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                          <boolProp name="resetInterpreter">true</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

Document document = Jsoup.parse(prev.getResponseDataAsString()); 

String error=document.select(&quot;span[id*=jbaraTransactionErrorMessages]&quot;).get(0).text();
if ( error.length() == 0){
vars.put(&quot;success&quot;,&quot;true&quot;);
}</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Downsell" enabled="true">
                    <stringProp name="IfController.condition">&quot;${tType}&quot; == &quot;Downsell&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                            <stringProp name="Argument.value">_viewRoot</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}</stringProp>
                            <stringProp name="Argument.value">${formid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${hiddenType}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${hiddenType}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custComponentId}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custComponentId}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_cname_search}</stringProp>
                            <stringProp name="Argument.value">${cName}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_display_cname}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_cid}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_cid}</stringProp>
                            <stringProp name="Argument.value">${cid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${select_opp}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${select_opp}</stringProp>
                            <stringProp name="Argument.value">0</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${select_btype}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${select_btype}</stringProp>
                            <stringProp name="Argument.value">${downsellid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                            <stringProp name="Argument.value">18/10/2013</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                            <stringProp name="Argument.value">18/10/2013</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_term}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_term}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${text_area_comments}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                            <stringProp name="Argument.value">${state}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                            <stringProp name="Argument.value">${mac}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                            <stringProp name="Argument.value">${csrf}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="jbBTId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">jbBTId</stringProp>
                            <stringProp name="Argument.value">${downsellid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${bTypeChangeId}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${bTypeChangeId}</stringProp>
                            <stringProp name="Argument.value">${bTypeChangeId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${sv}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                      <stringProp name="HTTPSampler.port">443</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                          </elementProp>
                          <elementProp name="Pragma" elementType="Header">
                            <stringProp name="Header.name">Pragma</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Cache-Control" elementType="Header">
                            <stringProp name="Header.name">Cache-Control</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">true</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import java.text.DecimalFormat;

String currencyFormat(String amt) {
		DecimalFormat moneyFormat = new DecimalFormat(&quot;###,###&quot;);
		return moneyFormat.format(new Long(amt));
	}

Document doc = Jsoup.parse(prev.getResponseDataAsString()); 
String symbol = vars.get(&quot;currencySymbol&quot;);
String parentTran = vars.get(&quot;parent&quot;);
String[] attrs = parentTran.split(&quot;,&quot;);
		String MRR = attrs[0];
		String ASV = attrs[1];
		String endDate = attrs[2];
		String text1 = &quot;%s %s, ASV:%s %s&quot;;

		String query1 = String.format(text1, new Object[]{symbol, currencyFormat(MRR),
					symbol, currencyFormat(ASV)});
		String query2 = &quot;End Date:&quot; + endDate;
		String query3 = &quot;End Date: &quot; + endDate;
		 Elements els=doc.select(&quot;span[class=parentTransactionListToAssociate]:contains(&quot;+query1+&quot;):contains(&quot;+query2+&quot;) input&quot;);
		 if (els.size()==0){
			 els=doc.select(&quot;span[class=parentTransactionListToAssociate]:contains(&quot;+query1+&quot;):contains(&quot;+query3+&quot;) input&quot;);
		 }
vars.put(&quot;pid&quot;,els.get(0).attr(&quot;value&quot;));

</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSRF" enabled="true">
                        <stringProp name="HtmlExtractor.refname">csrf</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateCSRF]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="MAC" enabled="true">
                        <stringProp name="HtmlExtractor.refname">mac</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateMAC]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="state" enabled="true">
                        <stringProp name="HtmlExtractor.refname">state</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewState]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="hidden_pid" enabled="true">
                        <stringProp name="HtmlExtractor.refname">hidden_pid</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=hiddenParentId]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_mrr" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_mrr</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=recurringMRR lineItemVal input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_asv" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_asv</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=recurringASV lineItemVal input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_users" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_users</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=lineItemVal lineItemUsers input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_otr" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_otr</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=lineItemVal lineItemOnetimeRevenue input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                      <stringProp name="IfController.condition">&quot;${pid}&quot;  != &quot;null&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                              <stringProp name="Argument.value">_viewRoot</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}</stringProp>
                              <stringProp name="Argument.value">${formid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${hiddenType}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${hiddenType}</stringProp>
                              <stringProp name="Argument.value">Downsell</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custComponentId}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custComponentId}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_cname_search}</stringProp>
                              <stringProp name="Argument.value">${cName}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_display_cname}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_cid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_cid}</stringProp>
                              <stringProp name="Argument.value">${cid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${select_opp}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${select_opp}</stringProp>
                              <stringProp name="Argument.value">0</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${select_btype}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${select_btype}</stringProp>
                              <stringProp name="Argument.value">${downsellid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="parentTransaction" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">parentTransaction</stringProp>
                              <stringProp name="Argument.value">${pid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${hidden_pid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${hidden_pid}</stringProp>
                              <stringProp name="Argument.value">${pid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                              <stringProp name="Argument.value">${bDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                              <stringProp name="Argument.value">${sDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                              <stringProp name="Argument.value">${eDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_term}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_term}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_mrr}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_mrr}</stringProp>
                              <stringProp name="Argument.value">${mrr}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_asv}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_asv}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_users}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_users}</stringProp>
                              <stringProp name="Argument.value">${users}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_otr}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_otr}</stringProp>
                              <stringProp name="Argument.value">${otr}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${text_area_comments}</stringProp>
                              <stringProp name="Argument.value">${comments}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                              <stringProp name="Argument.value">${state}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                              <stringProp name="Argument.value">${mac}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                              <stringProp name="Argument.value">${csrf}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${saveClickedId}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${saveClickedId}</stringProp>
                              <stringProp name="Argument.value">${saveClickedId}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">${sv}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                        <stringProp name="HTTPSampler.port">443</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                        <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                            </elementProp>
                            <elementProp name="Pragma" elementType="Header">
                              <stringProp name="Header.name">Pragma</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Cache-Control" elementType="Header">
                              <stringProp name="Header.name">Cache-Control</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate</stringProp>
                            </elementProp>
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                          <boolProp name="resetInterpreter">true</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

Document document = Jsoup.parse(prev.getResponseDataAsString()); 

String error=document.select(&quot;span[id*=jbaraTransactionErrorMessages]&quot;).get(0).text();
if ( error.length() == 0){
vars.put(&quot;success&quot;,&quot;true&quot;);
}</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                          <stringProp name="filename"></stringProp>
                          <stringProp name="parameters"></stringProp>
                          <boolProp name="resetInterpreter">false</boolProp>
                          <stringProp name="script">import org.apache.jmeter.protocol.http.util.HTTPArgument;

String renew=vars.get(&quot;rstatus&quot;).trim();
if (renew.equals(&quot;1&quot;)){
HTTPArgument arm=new HTTPArgument(&quot;toggleParentTransactionRenewableStatus&quot;,renew);
sampler.getArguments().addArgument(arm);
HTTPArgument arm2=new HTTPArgument(vars.get(&quot;confirmBox&quot;),&quot;on&quot;);
sampler.getArguments().addArgument(arm2);
}
else if (renew.equals(&quot;2&quot;)){
HTTPArgument arm=new HTTPArgument(&quot;toggleParentTransactionRenewableStatus&quot;,renew);
sampler.getArguments().addArgument(arm);

}</stringProp>
                        </BeanShellPreProcessor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CustomDownsell" enabled="true">
                    <stringProp name="IfController.condition">&quot;${tType}&quot; == &quot;CustomDownsell&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                            <stringProp name="Argument.value">_viewRoot</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}</stringProp>
                            <stringProp name="Argument.value">${formid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${hiddenType}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${hiddenType}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custComponentId}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custComponentId}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_cname_search}</stringProp>
                            <stringProp name="Argument.value">${cName}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_display_cname}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_cid}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_cid}</stringProp>
                            <stringProp name="Argument.value">${cid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${select_opp}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${select_opp}</stringProp>
                            <stringProp name="Argument.value">0</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${select_btype}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${select_btype}</stringProp>
                            <stringProp name="Argument.value">${customdownsellid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                            <stringProp name="Argument.value">18/10/2013</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                            <stringProp name="Argument.value">18/10/2013</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_term}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_term}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${text_area_comments}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                            <stringProp name="Argument.value">${state}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                            <stringProp name="Argument.value">${mac}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                            <stringProp name="Argument.value">${csrf}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="jbBTId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">jbBTId</stringProp>
                            <stringProp name="Argument.value">${customdownsellid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${bTypeChangeId}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${bTypeChangeId}</stringProp>
                            <stringProp name="Argument.value">${bTypeChangeId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${sv}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                      <stringProp name="HTTPSampler.port">443</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                          </elementProp>
                          <elementProp name="Pragma" elementType="Header">
                            <stringProp name="Header.name">Pragma</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Cache-Control" elementType="Header">
                            <stringProp name="Header.name">Cache-Control</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">true</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import java.text.DecimalFormat;

String currencyFormat(String amt) {
		DecimalFormat moneyFormat = new DecimalFormat(&quot;###,###&quot;);
		return moneyFormat.format(new Long(amt));
	}

Document doc = Jsoup.parse(prev.getResponseDataAsString()); 
String symbol = vars.get(&quot;currencySymbol&quot;);
String parentTran = vars.get(&quot;parent&quot;);
String[] attrs = parentTran.split(&quot;,&quot;);
		String MRR = attrs[0];
		String ASV = attrs[1];
		String endDate = attrs[2];
		String text1 = &quot;%s %s, ASV:%s %s&quot;;

		String query1 = String.format(text1, new Object[]{symbol, currencyFormat(MRR),
					symbol, currencyFormat(ASV)});
		String query2 = &quot;End Date:&quot; + endDate;
		String query3 = &quot;End Date: &quot; + endDate;
		 Elements els=doc.select(&quot;span[class=parentTransactionListToAssociate]:contains(&quot;+query1+&quot;):contains(&quot;+query2+&quot;) input&quot;);
		 if (els.size()==0){
			 els=doc.select(&quot;span[class=parentTransactionListToAssociate]:contains(&quot;+query1+&quot;):contains(&quot;+query3+&quot;) input&quot;);
		 }
vars.put(&quot;pid&quot;,els.get(0).attr(&quot;value&quot;));

</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSRF" enabled="true">
                        <stringProp name="HtmlExtractor.refname">csrf</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateCSRF]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="MAC" enabled="true">
                        <stringProp name="HtmlExtractor.refname">mac</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateMAC]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="state" enabled="true">
                        <stringProp name="HtmlExtractor.refname">state</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewState]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="hidden_pid" enabled="true">
                        <stringProp name="HtmlExtractor.refname">hidden_pid</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=hiddenParentId]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_mrr" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_mrr</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=recurringMRR lineItemVal input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_asv" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_asv</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=recurringASV lineItemVal input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_users" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_users</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=lineItemVal lineItemUsers input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_otr" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_otr</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=lineItemVal lineItemOnetimeRevenue input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                      <stringProp name="IfController.condition">&quot;${pid}&quot;  != &quot;null&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                              <stringProp name="Argument.value">_viewRoot</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}</stringProp>
                              <stringProp name="Argument.value">${formid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${hiddenType}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${hiddenType}</stringProp>
                              <stringProp name="Argument.value">CustomDownsell</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custComponentId}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custComponentId}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_cname_search}</stringProp>
                              <stringProp name="Argument.value">${cName}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_display_cname}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_cid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_cid}</stringProp>
                              <stringProp name="Argument.value">${cid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${select_opp}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${select_opp}</stringProp>
                              <stringProp name="Argument.value">0</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${select_btype}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${select_btype}</stringProp>
                              <stringProp name="Argument.value">${customdownsellid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="parentTransaction" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">parentTransaction</stringProp>
                              <stringProp name="Argument.value">${pid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${hidden_pid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${hidden_pid}</stringProp>
                              <stringProp name="Argument.value">${pid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                              <stringProp name="Argument.value">${bDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                              <stringProp name="Argument.value">${sDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                              <stringProp name="Argument.value">${eDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_term}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_term}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_mrr}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_mrr}</stringProp>
                              <stringProp name="Argument.value">${mrr}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_asv}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_asv}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_users}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_users}</stringProp>
                              <stringProp name="Argument.value">${users}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_otr}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_otr}</stringProp>
                              <stringProp name="Argument.value">${otr}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${text_area_comments}</stringProp>
                              <stringProp name="Argument.value">${comments}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                              <stringProp name="Argument.value">${state}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                              <stringProp name="Argument.value">${mac}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                              <stringProp name="Argument.value">${csrf}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${saveClickedId}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${saveClickedId}</stringProp>
                              <stringProp name="Argument.value">${saveClickedId}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">${sv}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                        <stringProp name="HTTPSampler.port">443</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                        <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                            </elementProp>
                            <elementProp name="Pragma" elementType="Header">
                              <stringProp name="Header.name">Pragma</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Cache-Control" elementType="Header">
                              <stringProp name="Header.name">Cache-Control</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate</stringProp>
                            </elementProp>
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                          <boolProp name="resetInterpreter">true</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

Document document = Jsoup.parse(prev.getResponseDataAsString()); 

String error=document.select(&quot;span[id*=jbaraTransactionErrorMessages]&quot;).get(0).text();
if ( error.length() == 0){
vars.put(&quot;success&quot;,&quot;true&quot;);
}</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                          <stringProp name="filename"></stringProp>
                          <stringProp name="parameters"></stringProp>
                          <boolProp name="resetInterpreter">false</boolProp>
                          <stringProp name="script">import org.apache.jmeter.protocol.http.util.HTTPArgument;

String renew=vars.get(&quot;rstatus&quot;).trim();
if (renew.equals(&quot;1&quot;)){
HTTPArgument arm=new HTTPArgument(&quot;toggleParentTransactionRenewableStatus&quot;,renew);
sampler.getArguments().addArgument(arm);
HTTPArgument arm2=new HTTPArgument(vars.get(&quot;confirmBox&quot;),&quot;on&quot;);
sampler.getArguments().addArgument(arm2);
}
else if (renew.equals(&quot;2&quot;)){
HTTPArgument arm=new HTTPArgument(&quot;toggleParentTransactionRenewableStatus&quot;,renew);
sampler.getArguments().addArgument(arm);

}</stringProp>
                        </BeanShellPreProcessor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Debook" enabled="true">
                    <stringProp name="IfController.condition">&quot;${tType}&quot; == &quot;Debook&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                            <stringProp name="Argument.value">_viewRoot</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}</stringProp>
                            <stringProp name="Argument.value">${formid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${hiddenType}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${hiddenType}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custComponentId}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custComponentId}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_cname_search}</stringProp>
                            <stringProp name="Argument.value">${cName}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_display_cname}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_cid}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_cid}</stringProp>
                            <stringProp name="Argument.value">${cid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${select_opp}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${select_opp}</stringProp>
                            <stringProp name="Argument.value">0</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${select_btype}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${select_btype}</stringProp>
                            <stringProp name="Argument.value">${debookid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                            <stringProp name="Argument.value">18/10/2013</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                            <stringProp name="Argument.value">18/10/2013</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_term}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_term}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${text_area_comments}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                            <stringProp name="Argument.value">${state}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                            <stringProp name="Argument.value">${sv}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                            <stringProp name="Argument.value">${mac}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                            <stringProp name="Argument.value">${csrf}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="jbBTId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">jbBTId</stringProp>
                            <stringProp name="Argument.value">${debookid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${bTypeChangeId}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${bTypeChangeId}</stringProp>
                            <stringProp name="Argument.value">${bTypeChangeId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                      <stringProp name="HTTPSampler.port">443</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                          </elementProp>
                          <elementProp name="Pragma" elementType="Header">
                            <stringProp name="Header.name">Pragma</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Cache-Control" elementType="Header">
                            <stringProp name="Header.name">Cache-Control</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">true</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import java.text.DecimalFormat;

String currencyFormat(String amt) {
		DecimalFormat moneyFormat = new DecimalFormat(&quot;###,###&quot;);
		return moneyFormat.format(new Long(amt));
	}

Document doc = Jsoup.parse(prev.getResponseDataAsString()); 
String symbol = vars.get(&quot;currencySymbol&quot;);
String parentTran = vars.get(&quot;parent&quot;);
String[] attrs = parentTran.split(&quot;,&quot;);
		String MRR = attrs[0];
		String ASV = attrs[1];
		String endDate = attrs[2];
		String text1 = &quot;%s %s, ASV:%s %s&quot;;

		String query1 = String.format(text1, new Object[]{symbol, currencyFormat(MRR),
					symbol, currencyFormat(ASV)});
		String query2 = &quot;End Date:&quot; + endDate;
		String query3 = &quot;End Date: &quot; + endDate;
		 Elements els=doc.select(&quot;span[class=parentTransactionListToAssociate]:contains(&quot;+query1+&quot;):contains(&quot;+query2+&quot;) input&quot;);
		 if (els.size()==0){
			 els=doc.select(&quot;span[class=parentTransactionListToAssociate]:contains(&quot;+query1+&quot;):contains(&quot;+query3+&quot;) input&quot;);
		 }
vars.put(&quot;pid&quot;,els.get(0).attr(&quot;value&quot;));

</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSRF" enabled="true">
                        <stringProp name="HtmlExtractor.refname">csrf</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateCSRF]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="MAC" enabled="true">
                        <stringProp name="HtmlExtractor.refname">mac</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateMAC]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="state" enabled="true">
                        <stringProp name="HtmlExtractor.refname">state</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewState]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="hidden_pid" enabled="true">
                        <stringProp name="HtmlExtractor.refname">hidden_pid</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=hiddenParentId]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_mrr" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_mrr</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=recurringMRR lineItemVal input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_asv" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_asv</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=recurringASV lineItemVal input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_users" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_users</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=lineItemVal lineItemUsers input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_otr" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_otr</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=lineItemVal lineItemOnetimeRevenue input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                      <stringProp name="IfController.condition">&quot;${pid}&quot;  != &quot;null&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                              <stringProp name="Argument.value">_viewRoot</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}</stringProp>
                              <stringProp name="Argument.value">${formid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${hiddenType}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${hiddenType}</stringProp>
                              <stringProp name="Argument.value">Debook</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custComponentId}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custComponentId}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_cname_search}</stringProp>
                              <stringProp name="Argument.value">${cName}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_display_cname}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_cid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_cid}</stringProp>
                              <stringProp name="Argument.value">${cid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${select_opp}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${select_opp}</stringProp>
                              <stringProp name="Argument.value">0</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${select_btype}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${select_btype}</stringProp>
                              <stringProp name="Argument.value">${debookid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="parentTransaction" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">parentTransaction</stringProp>
                              <stringProp name="Argument.value">${pid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${hidden_pid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${hidden_pid}</stringProp>
                              <stringProp name="Argument.value">${pid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                              <stringProp name="Argument.value">${bDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                              <stringProp name="Argument.value">${sDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                              <stringProp name="Argument.value">${eDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_term}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_term}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_mrr}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_mrr}</stringProp>
                              <stringProp name="Argument.value">${mrr}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_asv}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_asv}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_users}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_users}</stringProp>
                              <stringProp name="Argument.value">${users}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_otr}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_otr}</stringProp>
                              <stringProp name="Argument.value">${otr}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${text_area_comments}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                              <stringProp name="Argument.value">${state}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                              <stringProp name="Argument.value">${sv}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                              <stringProp name="Argument.value">${mac}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                              <stringProp name="Argument.value">${csrf}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${saveClickedId}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">${saveClickedId}</stringProp>
                              <stringProp name="Argument.value">${saveClickedId}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                        <stringProp name="HTTPSampler.port">443</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                        <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                            </elementProp>
                            <elementProp name="Pragma" elementType="Header">
                              <stringProp name="Header.name">Pragma</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Cache-Control" elementType="Header">
                              <stringProp name="Header.name">Cache-Control</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate</stringProp>
                            </elementProp>
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                          <boolProp name="resetInterpreter">true</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

Document document = Jsoup.parse(prev.getResponseDataAsString()); 

String error=document.select(&quot;span[id*=jbaraTransactionErrorMessages]&quot;).get(0).text();
if ( error.length() == 0){
vars.put(&quot;success&quot;,&quot;true&quot;);
}</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                          <stringProp name="filename"></stringProp>
                          <stringProp name="parameters"></stringProp>
                          <boolProp name="resetInterpreter">false</boolProp>
                          <stringProp name="script">import org.apache.jmeter.protocol.http.util.HTTPArgument;

String renew=vars.get(&quot;rstatus&quot;).trim();
if (renew.equals(&quot;1&quot;)){
HTTPArgument arm=new HTTPArgument(&quot;toggleParentTransactionRenewableStatus&quot;,renew);
sampler.getArguments().addArgument(arm);
HTTPArgument arm2=new HTTPArgument(vars.get(&quot;confirmBox&quot;),&quot;on&quot;);
sampler.getArguments().addArgument(arm2);
}
else if (renew.equals(&quot;2&quot;)){
HTTPArgument arm=new HTTPArgument(&quot;toggleParentTransactionRenewableStatus&quot;,renew);
sampler.getArguments().addArgument(arm);

}</stringProp>
                        </BeanShellPreProcessor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CustomDebook" enabled="true">
                    <stringProp name="IfController.condition">&quot;${tType}&quot; == &quot;CustomDebook&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                            <stringProp name="Argument.value">_viewRoot</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}</stringProp>
                            <stringProp name="Argument.value">${formid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${hiddenType}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${hiddenType}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custComponentId}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custComponentId}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_cname_search}</stringProp>
                            <stringProp name="Argument.value">${cName}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_display_cname}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_cid}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_cid}</stringProp>
                            <stringProp name="Argument.value">${cid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${select_opp}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${select_opp}</stringProp>
                            <stringProp name="Argument.value">0</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${select_btype}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${select_btype}</stringProp>
                            <stringProp name="Argument.value">${customdebookid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                            <stringProp name="Argument.value">18/10/2013</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                            <stringProp name="Argument.value">18/10/2013</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_term}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_term}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${text_area_comments}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                            <stringProp name="Argument.value">${state}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                            <stringProp name="Argument.value">${sv}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                            <stringProp name="Argument.value">${mac}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                            <stringProp name="Argument.value">${csrf}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="jbBTId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">jbBTId</stringProp>
                            <stringProp name="Argument.value">${customdebookid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${bTypeChangeId}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${bTypeChangeId}</stringProp>
                            <stringProp name="Argument.value">${bTypeChangeId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                      <stringProp name="HTTPSampler.port">443</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                          </elementProp>
                          <elementProp name="Pragma" elementType="Header">
                            <stringProp name="Header.name">Pragma</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Cache-Control" elementType="Header">
                            <stringProp name="Header.name">Cache-Control</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">true</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import java.text.DecimalFormat;

String currencyFormat(String amt) {
		DecimalFormat moneyFormat = new DecimalFormat(&quot;###,###&quot;);
		return moneyFormat.format(new Long(amt));
	}

Document doc = Jsoup.parse(prev.getResponseDataAsString()); 
String symbol = vars.get(&quot;currencySymbol&quot;);
String parentTran = vars.get(&quot;parent&quot;);
String[] attrs = parentTran.split(&quot;,&quot;);
		String MRR = attrs[0];
		String ASV = attrs[1];
		String endDate = attrs[2];
		String text1 = &quot;%s %s, ASV:%s %s&quot;;

		String query1 = String.format(text1, new Object[]{symbol, currencyFormat(MRR),
					symbol, currencyFormat(ASV)});
		String query2 = &quot;End Date:&quot; + endDate;
		String query3 = &quot;End Date: &quot; + endDate;
		 Elements els=doc.select(&quot;span[class=parentTransactionListToAssociate]:contains(&quot;+query1+&quot;):contains(&quot;+query2+&quot;) input&quot;);
		 if (els.size()==0){
			 els=doc.select(&quot;span[class=parentTransactionListToAssociate]:contains(&quot;+query1+&quot;):contains(&quot;+query3+&quot;) input&quot;);
		 }
vars.put(&quot;pid&quot;,els.get(0).attr(&quot;value&quot;));

</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSRF" enabled="true">
                        <stringProp name="HtmlExtractor.refname">csrf</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateCSRF]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="MAC" enabled="true">
                        <stringProp name="HtmlExtractor.refname">mac</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateMAC]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="state" enabled="true">
                        <stringProp name="HtmlExtractor.refname">state</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewState]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="hidden_pid" enabled="true">
                        <stringProp name="HtmlExtractor.refname">hidden_pid</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=hiddenParentId]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_mrr" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_mrr</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=recurringMRR lineItemVal input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_asv" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_asv</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=recurringASV lineItemVal input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_users" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_users</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=lineItemVal lineItemUsers input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="input_otr" enabled="true">
                        <stringProp name="HtmlExtractor.refname">input_otr</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[class=lineItemVal lineItemOnetimeRevenue input-field]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">name</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                      <stringProp name="IfController.condition">&quot;${pid}&quot;  != &quot;null&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                              <stringProp name="Argument.value">_viewRoot</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}</stringProp>
                              <stringProp name="Argument.value">${formid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${hiddenType}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${hiddenType}</stringProp>
                              <stringProp name="Argument.value">CustomDebook</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custComponentId}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custComponentId}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_cname_search}</stringProp>
                              <stringProp name="Argument.value">${cName}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_display_cname}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_cid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_cid}</stringProp>
                              <stringProp name="Argument.value">${cid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${select_opp}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${select_opp}</stringProp>
                              <stringProp name="Argument.value">0</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${select_btype}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${select_btype}</stringProp>
                              <stringProp name="Argument.value">${customdebookid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="parentTransaction" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">parentTransaction</stringProp>
                              <stringProp name="Argument.value">${pid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${hidden_pid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${hidden_pid}</stringProp>
                              <stringProp name="Argument.value">${pid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                              <stringProp name="Argument.value">${bDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                              <stringProp name="Argument.value">${sDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                              <stringProp name="Argument.value">${eDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_term}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_term}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_mrr}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_mrr}</stringProp>
                              <stringProp name="Argument.value">${mrr}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_asv}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_asv}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_users}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_users}</stringProp>
                              <stringProp name="Argument.value">${users}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_otr}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_otr}</stringProp>
                              <stringProp name="Argument.value">${otr}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${text_area_comments}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                              <stringProp name="Argument.value">${state}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                              <stringProp name="Argument.value">${sv}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                              <stringProp name="Argument.value">${mac}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                              <stringProp name="Argument.value">${csrf}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${saveClickedId}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">${saveClickedId}</stringProp>
                              <stringProp name="Argument.value">${saveClickedId}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                        <stringProp name="HTTPSampler.port">443</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                        <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                            </elementProp>
                            <elementProp name="Pragma" elementType="Header">
                              <stringProp name="Header.name">Pragma</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Cache-Control" elementType="Header">
                              <stringProp name="Header.name">Cache-Control</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate</stringProp>
                            </elementProp>
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                          <boolProp name="resetInterpreter">true</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

Document document = Jsoup.parse(prev.getResponseDataAsString()); 

String error=document.select(&quot;span[id*=jbaraTransactionErrorMessages]&quot;).get(0).text();
if ( error.length() == 0){
vars.put(&quot;success&quot;,&quot;true&quot;);
}</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                          <stringProp name="filename"></stringProp>
                          <stringProp name="parameters"></stringProp>
                          <boolProp name="resetInterpreter">false</boolProp>
                          <stringProp name="script">import org.apache.jmeter.protocol.http.util.HTTPArgument;

String renew=vars.get(&quot;rstatus&quot;).trim();
if (renew.equals(&quot;1&quot;)){
HTTPArgument arm=new HTTPArgument(&quot;toggleParentTransactionRenewableStatus&quot;,renew);
sampler.getArguments().addArgument(arm);
HTTPArgument arm2=new HTTPArgument(vars.get(&quot;confirmBox&quot;),&quot;on&quot;);
sampler.getArguments().addArgument(arm2);
}
else if (renew.equals(&quot;2&quot;)){
HTTPArgument arm=new HTTPArgument(&quot;toggleParentTransactionRenewableStatus&quot;,renew);
sampler.getArguments().addArgument(arm);

}</stringProp>
                        </BeanShellPreProcessor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Churn" enabled="true">
                    <stringProp name="IfController.condition">&quot;${tType}&quot; ==&quot;Churn&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                            <stringProp name="Argument.value">_viewRoot</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}</stringProp>
                            <stringProp name="Argument.value">${formid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${hiddenType}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${hiddenType}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custComponentId}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custComponentId}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_cname_search}</stringProp>
                            <stringProp name="Argument.value">${cName}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_display_cname}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_cid}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_cid}</stringProp>
                            <stringProp name="Argument.value">${cid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${select_opp}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${select_opp}</stringProp>
                            <stringProp name="Argument.value">0</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${select_btype}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${select_btype}</stringProp>
                            <stringProp name="Argument.value">${churnid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                            <stringProp name="Argument.value">18/10/2013</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                            <stringProp name="Argument.value">18/10/2013</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${input_term}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${input_term}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${text_area_comments}</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                            <stringProp name="Argument.value">${state}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                            <stringProp name="Argument.value">${sv}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                            <stringProp name="Argument.value">${mac}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                            <stringProp name="Argument.value">${csrf}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="jbBTId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">jbBTId</stringProp>
                            <stringProp name="Argument.value">${churnid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="${bTypeChangeId}" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">${bTypeChangeId}</stringProp>
                            <stringProp name="Argument.value">${bTypeChangeId}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                      <stringProp name="HTTPSampler.port">443</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                          </elementProp>
                          <elementProp name="Pragma" elementType="Header">
                            <stringProp name="Header.name">Pragma</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Cache-Control" elementType="Header">
                            <stringProp name="Header.name">Cache-Control</stringProp>
                            <stringProp name="Header.value">no-cache</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                        <boolProp name="resetInterpreter">true</boolProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
                                           
Document document = Jsoup.parse(prev.getResponseDataAsString()); 
vars.put(&quot;reasonid&quot;,document.select(&quot;option:contains(&quot;+vars.get(&quot;reason&quot;)+&quot;)&quot;).get(0).attr(&quot;value&quot;));


</stringProp>
                      </BeanShellPostProcessor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSRF" enabled="true">
                        <stringProp name="HtmlExtractor.refname">csrf</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateCSRF]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="MAC" enabled="true">
                        <stringProp name="HtmlExtractor.refname">mac</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateMAC]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="state" enabled="true">
                        <stringProp name="HtmlExtractor.refname">state</stringProp>
                        <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewState]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default">not found</stringProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                      <stringProp name="IfController.condition">&quot;${creason}&quot;  != &quot;null&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/TransactionForm" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="AJAXREQUEST" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">AJAXREQUEST</stringProp>
                              <stringProp name="Argument.value">_viewRoot</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}</stringProp>
                              <stringProp name="Argument.value">${formid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${hiddenType}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${hiddenType}</stringProp>
                              <stringProp name="Argument.value">Churn</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custComponentId}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custComponentId}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupDisabledCustControl}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupDisabledCustControl}</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupHasDefaultCustomText}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupHasDefaultCustomText}</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${custLookupDefaultCustomText}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${custLookupDefaultCustomText}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_cname_search}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_cname_search}</stringProp>
                              <stringProp name="Argument.value">${cName}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_display_cname}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_display_cname}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_cid}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_cid}</stringProp>
                              <stringProp name="Argument.value">${cid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${select_opp}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${select_opp}</stringProp>
                              <stringProp name="Argument.value">0</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${select_btype}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${select_btype}</stringProp>
                              <stringProp name="Argument.value">${churnid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:bookingDate" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:bookingDate</stringProp>
                              <stringProp name="Argument.value">${bDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:subscriptionStart" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:subscriptionStart</stringProp>
                              <stringProp name="Argument.value">${sDate}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:subscriptionEnd" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:subscriptionEnd</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${input_term}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${input_term}</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${formid}:j_id179" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${formid}:j_id179</stringProp>
                              <stringProp name="Argument.value">${reasonid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${saveClickedId}2" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${saveClickedId}2</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${text_area_comments}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${text_area_comments}</stringProp>
                              <stringProp name="Argument.value">${comments}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewState" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewState</stringProp>
                              <stringProp name="Argument.value">${state}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateVersion" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateVersion</stringProp>
                              <stringProp name="Argument.value">${sv}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateMAC" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateMAC</stringProp>
                              <stringProp name="Argument.value">${mac}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="com.salesforce.visualforce.ViewStateCSRF" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">com.salesforce.visualforce.ViewStateCSRF</stringProp>
                              <stringProp name="Argument.value">${csrf}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="${saveClickedId}" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">${saveClickedId}</stringProp>
                              <stringProp name="Argument.value">${saveClickedId}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                        <stringProp name="HTTPSampler.port">443</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                        <stringProp name="HTTPSampler.path">/apex/TransactionForm</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                            </elementProp>
                            <elementProp name="Pragma" elementType="Header">
                              <stringProp name="Header.name">Pragma</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Cache-Control" elementType="Header">
                              <stringProp name="Header.name">Cache-Control</stringProp>
                              <stringProp name="Header.value">no-cache</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate</stringProp>
                            </elementProp>
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">https://jbcxm.ap1.visual.force.com/apex/apex/TransactionForm?inline=1&amp;transactionId=&amp;customerId=&amp;orderType=&amp;callBackAfterSave=jbaraCallBackAfterTransactionFormSave&amp;callBackAfterCancel=jbaraCallBackAfterTransactionFormCancel</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                          <boolProp name="resetInterpreter">true</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

Document document = Jsoup.parse(prev.getResponseDataAsString()); 

String error=document.select(&quot;span[id*=jbaraTransactionErrorMessages]&quot;).get(0).text();
if ( error.length() == 0){
vars.put(&quot;success&quot;,&quot;true&quot;);
}</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="transaction success check" enabled="true">
                    <stringProp name="IfController.condition">&quot;${success}&quot; == &quot;true&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="managed" enabled="true">
                      <stringProp name="IfController.condition">&quot;${managed}&quot; == &quot;true&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/CustomerSuccess360" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="cid" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">cid</stringProp>
                              <stringProp name="Argument.value">${cid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                        <stringProp name="HTTPSampler.port">443</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">/apex/CustomerSuccess360</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                          <boolProp name="resetInterpreter">true</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">import com.gs.headless.util.Transactions;

 Transactions trans=new Transactions();
String id = trans.getLatestID(vars.get(&quot;un&quot;),vars.get(&quot;pwd&quot;),vars.get(&quot;st&quot;),vars.get(&quot;managed&quot;));
log.info(&quot;transaction id is &quot; + id);
vars.put(&quot;prevTid&quot;,id);</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                        <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
                          <stringProp name="filename"></stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="script">var data=prev.getResponseDataAsString();
var index=data.indexOf(&apos;RemotingProviderImpl&apos;);
var sindex=data.indexOf(&apos;(&apos;,index);
var lindex=data.indexOf(&apos;)&apos;,index);
var jstring=data.substr(sindex,lindex-sindex+1);
var json=eval(jstring);
vars.put(&quot;jcsrf&quot;,json.actions[&quot;JBCXM.Customer360Broker&quot;].ms[1].csrf);
vars.put(&quot;jvid&quot;,json.vf.vid);
vars.put(&quot;jver&quot;,json.actions[&quot;JBCXM.Customer360Broker&quot;].ms[1].ver);

// to write to file
//Summary fields
vars.put(&quot;S-ASV&quot;,&quot;&quot;);
vars.put(&quot;S-MRR&quot;,&quot;&quot;);
vars.put(&quot;S-OTR&quot;,&quot;&quot;);
vars.put(&quot;S-users&quot;,&quot;&quot;);
vars.put(&quot;S-ARPU&quot;,&quot;&quot;);
vars.put(&quot;S-OriginalContractDate&quot;,&quot;&quot;);
vars.put(&quot;S-RenewalDate&quot;,&quot;&quot;);
vars.put(&quot;S-Status&quot;,&quot;&quot;);

// line fields

vars.put(&quot;lBookingDate&quot;,&quot;&quot;);
vars.put(&quot;lBookingType&quot;,&quot;&quot;);
vars.put(&quot;lMRR&quot;,&quot;&quot;);
vars.put(&quot;lASV&quot;,&quot;&quot;);
vars.put(&quot;lStartDate&quot;,&quot;&quot;);
vars.put(&quot;lEndDate&quot;,&quot;&quot;);
vars.put(&quot;lOTR&quot;,&quot;&quot;);
vars.put(&quot;lUsers&quot;,&quot;&quot;);

</stringProp>
                          <stringProp name="scriptLanguage">javascript</stringProp>
                        </BSFPostProcessor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="accountId" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">accountId</stringProp>
                          <stringProp name="RegexExtractor.regex">GS.accountId  = &quot;(.*)&quot;;  </stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">not found</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="accountStatus" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">accountStatus</stringProp>
                          <stringProp name="RegexExtractor.regex"> GS.customerStatus(\s*)= &quot;(.*)&quot;;</stringProp>
                          <stringProp name="RegexExtractor.template">$2$</stringProp>
                          <stringProp name="RegexExtractor.default">not found</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSRF" enabled="true">
                          <stringProp name="HtmlExtractor.refname">csrf</stringProp>
                          <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateCSRF]</stringProp>
                          <stringProp name="HtmlExtractor.attribute">value</stringProp>
                          <stringProp name="HtmlExtractor.default">not found</stringProp>
                          <stringProp name="HtmlExtractor.match_number">1</stringProp>
                          <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                        </HtmlExtractor>
                        <hashTree/>
                        <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="MAC" enabled="true">
                          <stringProp name="HtmlExtractor.refname">mac</stringProp>
                          <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewStateMAC]</stringProp>
                          <stringProp name="HtmlExtractor.attribute">value</stringProp>
                          <stringProp name="HtmlExtractor.default">not found</stringProp>
                          <stringProp name="HtmlExtractor.match_number">1</stringProp>
                          <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                        </HtmlExtractor>
                        <hashTree/>
                        <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="state" enabled="true">
                          <stringProp name="HtmlExtractor.refname">state</stringProp>
                          <stringProp name="HtmlExtractor.expr">[name=com.salesforce.visualforce.ViewState]</stringProp>
                          <stringProp name="HtmlExtractor.attribute">value</stringProp>
                          <stringProp name="HtmlExtractor.default">not found</stringProp>
                          <stringProp name="HtmlExtractor.match_number">1</stringProp>
                          <stringProp name="HtmlExtractor.extractor_impl">JSOUP</stringProp>
                        </HtmlExtractor>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">&quot;${accountid}&quot; != &quot;not found&quot; &amp;&amp; &quot;${accountid}&quot; != &quot;null&quot; </stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apexremote" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&quot;action&quot;:&quot;JBCXM.Customer360Broker&quot;,&quot;method&quot;:&quot;customer360RequestBroker&quot;,&quot;data&quot;:[&quot;{\&quot;action\&quot;:\&quot;360Config.get360Config\&quot;,\&quot;custInfo\&quot;:{\&quot;accountId\&quot;:\&quot;${accountId}\&quot;}}&quot;],&quot;type&quot;:&quot;rpc&quot;,&quot;tid&quot;:2,&quot;ctx&quot;:{&quot;csrf&quot;:&quot;${jcsrf}&quot;,&quot;vid&quot;:&quot;${jvid}&quot;,&quot;ns&quot;:&quot;JBCXM&quot;,&quot;ver&quot;:${jver}}}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                          <stringProp name="HTTPSampler.port">443</stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                          <stringProp name="HTTPSampler.path">/apexremote</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Content-Type" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                              </elementProp>
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:25.0) Gecko/20100101 Firefox/25.0</stringProp>
                              </elementProp>
                              <elementProp name="Pragma" elementType="Header">
                                <stringProp name="Header.name">Pragma</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="Cache-Control" elementType="Header">
                                <stringProp name="Header.name">Cache-Control</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="X-User-Agent" elementType="Header">
                                <stringProp name="Header.name">X-User-Agent</stringProp>
                                <stringProp name="Header.value">Visualforce-Remoting</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate</stringProp>
                              </elementProp>
                              <elementProp name="X-Requested-With" elementType="Header">
                                <stringProp name="Header.name">X-Requested-With</stringProp>
                                <stringProp name="Header.value">XMLHttpRequest</stringProp>
                              </elementProp>
                              <elementProp name="Referer" elementType="Header">
                                <stringProp name="Header.name">Referer</stringProp>
                                <stringProp name="Header.value">https://jbcxm.na15.visual.force.com/apex/CustomerSuccess360?cid=001i000000UiktnAAB</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
                            <stringProp name="scriptLanguage">javascript</stringProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">var data=prev.getResponseDataAsString();
var json=eval(data);
var sections=json[0].result.dataObj.sections;
var sid=&quot;&quot;;
for(var i=0;i&lt; sections.length;i++){
if(sections[i].name===&apos;Summary&apos;)
{
sid=sections[i].Id;
}

}
vars.put(&quot;summaryId&quot;,sid);</stringProp>
                          </BSFPostProcessor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apexremote" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&quot;action&quot;:&quot;JBCXM.Customer360Broker&quot;,&quot;method&quot;:&quot;customer360RequestBroker&quot;,&quot;data&quot;:[&quot;{\&quot;action\&quot;:\&quot;summary.getSummary\&quot;,\&quot;custInfo\&quot;:{\&quot;accountId\&quot;:\&quot;${accountId}\&quot;,\&quot;customerId\&quot;:\&quot;${cid}\&quot;,\&quot;section\&quot;:{\&quot;order\&quot;:1,\&quot;name\&quot;:\&quot;Summary\&quot;,\&quot;isStandardObject\&quot;:false,\&quot;label\&quot;:\&quot;Summary\&quot;,\&quot;Id\&quot;:\&quot;${summaryId}\&quot;,\&quot;type\&quot;:\&quot;Standard\&quot;,\&quot;msg\&quot;:\&quot;\&quot;,\&quot;render\&quot;:true}}}&quot;],&quot;type&quot;:&quot;rpc&quot;,&quot;tid&quot;:6,&quot;ctx&quot;:{&quot;csrf&quot;:&quot;${jcsrf}&quot;,&quot;vid&quot;:&quot;${jvid}&quot;,&quot;ns&quot;:&quot;JBCXM&quot;,&quot;ver&quot;:${jver}}}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                          <stringProp name="HTTPSampler.port">443</stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                          <stringProp name="HTTPSampler.path">/apexremote</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Content-Type" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                              </elementProp>
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:25.0) Gecko/20100101 Firefox/25.0</stringProp>
                              </elementProp>
                              <elementProp name="Pragma" elementType="Header">
                                <stringProp name="Header.name">Pragma</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="Cache-Control" elementType="Header">
                                <stringProp name="Header.name">Cache-Control</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="X-User-Agent" elementType="Header">
                                <stringProp name="Header.name">X-User-Agent</stringProp>
                                <stringProp name="Header.value">Visualforce-Remoting</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate</stringProp>
                              </elementProp>
                              <elementProp name="X-Requested-With" elementType="Header">
                                <stringProp name="Header.name">X-Requested-With</stringProp>
                                <stringProp name="Header.value">XMLHttpRequest</stringProp>
                              </elementProp>
                              <elementProp name="Referer" elementType="Header">
                                <stringProp name="Header.name">Referer</stringProp>
                                <stringProp name="Header.value">https://jbcxm.na15.visual.force.com/apex/CustomerSuccess360?cid=001i000000UiktnAAB</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
                            <stringProp name="scriptLanguage">javascript</stringProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">var data=prev.getResponseDataAsString();
var json=eval(&apos;(&apos;+data+&apos;)&apos;);
var dataObjects=json[0].result.dataObj;
getFieldValue=function(key){
for(var i=0;i&lt; dataObjects.length;i++){
if(dataObjects[i][key] != null )
{
return dataObjects[i][key].value;
}
}
}

var ocd=getFieldValue(&apos;OCD&apos;);
if (ocd != null)
vars.put(&quot;S-OriginalContractDate&quot;,ocd);

var rDate=getFieldValue(&apos;RenewalDate&apos;);
if (rDate != null)
vars.put(&quot;S-RenewalDate&quot;,rDate);

var asv=getFieldValue(&apos;ASV&apos;);
if (asv != null)
vars.put(&quot;S-ASV&quot;,asv);

var mrr=getFieldValue(&apos;MRR&apos;);
if (mrr != null)
vars.put(&quot;S-MRR&quot;,mrr);

var otr=getFieldValue(&apos;OneTime&apos;);
if (otr != null)
vars.put(&quot;S-OTR&quot;,otr);

var arpu=getFieldValue(&apos;ARPU&apos;);
if (arpu != null)
vars.put(&quot;S-ARPU&quot;,arpu);

var users=getFieldValue(&apos;Users&apos;);
if(users != null)
vars.put(&quot;S-users&quot;,users);

if(vars.get(&quot;accountStatus&quot;) != &quot;not found&quot;)
var Status=vars.get(&quot;accountStatus&quot;);
vars.put(&quot;S-Status&quot;,Status);</stringProp>
                          </BSFPostProcessor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apexremote" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&quot;action&quot;:&quot;JBCXM.Customer360Broker&quot;,&quot;method&quot;:&quot;customer360RequestBroker&quot;,&quot;data&quot;:[&quot;{\&quot;action\&quot;:\&quot;transaction.getTransaction\&quot;,\&quot;custInfo\&quot;:{\&quot;accountId\&quot;:\&quot;${accountId}\&quot;}}&quot;],&quot;type&quot;:&quot;rpc&quot;,&quot;tid&quot;:4,&quot;ctx&quot;:{&quot;csrf&quot;:&quot;${jcsrf}&quot;,&quot;vid&quot;:&quot;${jvid}&quot;,&quot;ns&quot;:&quot;JBCXM&quot;,&quot;ver&quot;:${jver}}}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                          <stringProp name="HTTPSampler.port">443</stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                          <stringProp name="HTTPSampler.path">/apexremote</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Content-Type" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                              </elementProp>
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:25.0) Gecko/20100101 Firefox/25.0</stringProp>
                              </elementProp>
                              <elementProp name="Pragma" elementType="Header">
                                <stringProp name="Header.name">Pragma</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="Cache-Control" elementType="Header">
                                <stringProp name="Header.name">Cache-Control</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="X-User-Agent" elementType="Header">
                                <stringProp name="Header.name">X-User-Agent</stringProp>
                                <stringProp name="Header.value">Visualforce-Remoting</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate</stringProp>
                              </elementProp>
                              <elementProp name="X-Requested-With" elementType="Header">
                                <stringProp name="Header.name">X-Requested-With</stringProp>
                                <stringProp name="Header.value">XMLHttpRequest</stringProp>
                              </elementProp>
                              <elementProp name="Referer" elementType="Header">
                                <stringProp name="Header.name">Referer</stringProp>
                                <stringProp name="Header.value">https://jbcxm.na15.visual.force.com/apex/CustomerSuccess360?cid=001i000000UiktnAAB</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
                            <stringProp name="scriptLanguage">javascript</stringProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">var data=prev.getResponseDataAsString();
var json=eval(&apos;(&apos;+data+&apos;)&apos;);
var dataObjects=json[0].result.dataObj.value.transactions.value;

getDate=function (dStr){
if(dStr != undefined &amp;&amp; dStr != null){
var date = new Date(dStr);
return (date.getMonth()+1)+&quot;/&quot;+date.getDate()+&quot;/&quot;+date.getFullYear();
}
else
return &quot;&quot;;
}

getTransDetails=function (tid){
for(var i=0;i&lt; dataObjects.length;i++){
var trn=dataObjects[i].value;
if(trn.Id == tid )
{
var bType=trn.JBCXM__OrderType__r.value;
if(bType != null)
vars.put(&quot;lBookingType&quot;,bType.Name);
else 
vars.put(&quot;lBookingType&quot;,vars.get(&quot;tType&quot;));

var bDate=getDate(trn.JBCXM__Date__c);
if (bDate != &quot;&quot;)
vars.put(&quot;lBookingDate&quot;,bDate);

var sDate=getDate(trn.JBCXM__RevRecStartDate__c);
if (sDate != &quot;&quot;)
vars.put(&quot;lStartDate&quot;,sDate);

var eDate=getDate(trn.JBCXM__RevRecEndDate__c);
if (eDate != &quot;&quot;)
vars.put(&quot;lEndDate&quot;,eDate);

var mrr=trn.JBCXM__MRRTotal__c;
if (mrr != null)
{
 mrr=mrr.toString().replace(&apos;-&apos;,&apos;&apos;);
 vars.put(&quot;lMRR&quot;,mrr);
}
var asv=trn.JBCXM__ASVTotal__c;
if (asv != null)
{
   asv=asv.toString().replace(&apos;-&apos;,&apos;&apos;);
   vars.put(&quot;lASV&quot;,asv);
}
var users=trn.JBCXM__UsersTotal__c;
if (users != null)
{
	users=users.toString().replace(&apos;-&apos;,&apos;&apos;);	
     vars.put(&quot;lUsers&quot;,users);
}

var otr=trn.JBCXM__OneTimeRevenue__c;
if (otr != null)
vars.put(&quot;lOTR&quot;,otr);
}
}
}

getTransDetails(vars.get(&quot;prevTid&quot;));</stringProp>
                          </BSFPostProcessor>
                          <hashTree/>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="writeResult" enabled="true">
                            <boolProp name="resetInterpreter">false</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">import com.gs.headless.util.Output;
Output out=new Output();
&quot;S-ASV,S-MRR,S-OTR,S-users,S-ARPU,S-OriginalContractDate,S-RenewalDate,Status,BookingDate,Booking Type,MRR,ASV,StartDate,EndDate,OTR,Users&quot;;

if(vars.get(&quot;S-Status&quot;).equals(&quot;Active&quot;))
{
	row=vars.get(&quot;S-ASV&quot;)+&quot;,&quot;+vars.get(&quot;S-MRR&quot;)+&quot;,&quot;+vars.get(&quot;S-OTR&quot;)+&quot;,&quot;+vars.get(&quot;S-users&quot;)+&quot;,&quot;+vars.get(&quot;S-ARPU&quot;)+&quot;,&quot;+vars.get(&quot;S-OriginalContractDate&quot;)+&quot;,&quot;+vars.get(&quot;S-RenewalDate&quot;)+&quot;,&quot;+vars.get(&quot;S-Status&quot;)+&quot;,&quot;+vars.get(&quot;lBookingDate&quot;)+&quot;,&quot;+vars.get(&quot;lBookingType&quot;)+&quot;,&quot;+vars.get(&quot;lMRR&quot;)+&quot;,&quot;+vars.get(&quot;lASV&quot;)+&quot;,&quot;+vars.get(&quot;lStartDate&quot;)+&quot;,&quot;+vars.get(&quot;lEndDate&quot;)+&quot;,&quot;+vars.get(&quot;lOTR&quot;)+&quot;,&quot;+vars.get(&quot;lUsers&quot;);

}
else
{
	row=vars.get(&quot;S-ASV&quot;)+&quot;,&quot;+vars.get(&quot;S-MRR&quot;)+&quot;,&quot;+vars.get(&quot;S-OTR&quot;)+&quot;,&quot;+vars.get(&quot;S-users&quot;)+&quot;,&quot;+vars.get(&quot;S-ARPU&quot;)+&quot;,&quot;+vars.get(&quot;S-OriginalContractDate&quot;)+&quot;,&quot;+vars.get(&quot;S-RenewalDate&quot;)+&quot;,&quot;+vars.get(&quot;S-Status&quot;)+&quot;(&quot;+vars.get(&quot;lBookingDate&quot;)+&quot;),&quot;+vars.get(&quot;lBookingDate&quot;)+&quot;,&quot;+vars.get(&quot;lBookingType&quot;)+&quot;,&quot;+vars.get(&quot;lMRR&quot;)+&quot;,&quot;+vars.get(&quot;lASV&quot;)+&quot;,&quot;+vars.get(&quot;lStartDate&quot;)+&quot;,&quot;+vars.get(&quot;lEndDate&quot;)+&quot;,&quot;+vars.get(&quot;lOTR&quot;)+&quot;,&quot;+vars.get(&quot;lUsers&quot;);
}


out.writeActuals(vars.get(&quot;id&quot;)+&quot;,&quot;+vars.get(&quot;cName&quot;),row);</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="unmanaged" enabled="true">
                      <stringProp name="IfController.condition">&quot;${managed}&quot; != &quot;true&quot;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apex/CustomerSuccess360" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="cid" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">cid</stringProp>
                              <stringProp name="Argument.value">${cid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                        <stringProp name="HTTPSampler.port">443</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">/apex/CustomerSuccess360</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                          <boolProp name="resetInterpreter">true</boolProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">import com.gs.headless.util.Transactions;

 Transactions trans=new Transactions();
String id = trans.getLatestID(vars.get(&quot;un&quot;),vars.get(&quot;pwd&quot;),vars.get(&quot;st&quot;),vars.get(&quot;managed&quot;));
log.info(&quot;transaction id is &quot; + id);
vars.put(&quot;prevTid&quot;,id);</stringProp>
                        </BeanShellPostProcessor>
                        <hashTree/>
                        <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
                          <stringProp name="filename"></stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="script">var data=prev.getResponseDataAsString();
var index=data.indexOf(&apos;RemotingProviderImpl&apos;);
var sindex=data.indexOf(&apos;(&apos;,index);
var lindex=data.indexOf(&apos;)&apos;,index);
var jstring=data.substr(sindex,lindex-sindex+1);
var json=eval(jstring);
vars.put(&quot;jcsrf&quot;,json.actions[&quot;Customer360Broker&quot;].ms[0].csrf);
vars.put(&quot;jvid&quot;,json.vf.vid);
vars.put(&quot;jver&quot;,json.actions[&quot;Customer360Broker&quot;].ms[0].ver);

// to write to file
//Summary fields
vars.put(&quot;S-ASV&quot;,&quot;&quot;);
vars.put(&quot;S-MRR&quot;,&quot;&quot;);
vars.put(&quot;S-OTR&quot;,&quot;&quot;);
vars.put(&quot;S-users&quot;,&quot;&quot;);
vars.put(&quot;S-ARPU&quot;,&quot;&quot;);
vars.put(&quot;S-OriginalContractDate&quot;,&quot;&quot;);
vars.put(&quot;S-RenewalDate&quot;,&quot;&quot;);
vars.put(&quot;S-Status&quot;,&quot;&quot;);

// line fields

vars.put(&quot;lBookingDate&quot;,&quot;&quot;);
vars.put(&quot;lBookingType&quot;,&quot;&quot;);
vars.put(&quot;lMRR&quot;,&quot;&quot;);
vars.put(&quot;lASV&quot;,&quot;&quot;);
vars.put(&quot;lStartDate&quot;,&quot;&quot;);
vars.put(&quot;lEndDate&quot;,&quot;&quot;);
vars.put(&quot;lOTR&quot;,&quot;&quot;);
vars.put(&quot;lUsers&quot;,&quot;&quot;);

</stringProp>
                          <stringProp name="scriptLanguage">javascript</stringProp>
                        </BSFPostProcessor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="accountid" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">accountid</stringProp>
                          <stringProp name="RegexExtractor.regex">GS.accountId  = &quot;(.*)&quot;;  </stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">not found</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="accountStatus" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">accountStatus</stringProp>
                          <stringProp name="RegexExtractor.regex"> GS.customerStatus   = &quot;(.*)&quot;;</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">not found</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">&quot;${accountid}&quot; != &quot;not found&quot; &amp;&amp; &quot;${accountid}&quot; != &quot;null&quot; </stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apexremote" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&quot;action&quot;:&quot;Customer360Broker&quot;,&quot;method&quot;:&quot;customer360RequestBroker&quot;,&quot;data&quot;:[&quot;{\&quot;action\&quot;:\&quot;360Config.get360Config\&quot;,\&quot;custInfo\&quot;:{\&quot;accountId\&quot;:\&quot;${accountid}\&quot;}}&quot;],&quot;type&quot;:&quot;rpc&quot;,&quot;tid&quot;:2,&quot;ctx&quot;:{&quot;csrf&quot;:&quot;${jcsrf}&quot;,&quot;vid&quot;:&quot;${jvid}&quot;,&quot;ns&quot;:&quot;&quot;,&quot;ver&quot;:${jver}}}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                          <stringProp name="HTTPSampler.port">443</stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                          <stringProp name="HTTPSampler.path">/apexremote</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Content-Type" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                              </elementProp>
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:25.0) Gecko/20100101 Firefox/25.0</stringProp>
                              </elementProp>
                              <elementProp name="Pragma" elementType="Header">
                                <stringProp name="Header.name">Pragma</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="Cache-Control" elementType="Header">
                                <stringProp name="Header.name">Cache-Control</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="X-User-Agent" elementType="Header">
                                <stringProp name="Header.name">X-User-Agent</stringProp>
                                <stringProp name="Header.value">Visualforce-Remoting</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate</stringProp>
                              </elementProp>
                              <elementProp name="X-Requested-With" elementType="Header">
                                <stringProp name="Header.name">X-Requested-With</stringProp>
                                <stringProp name="Header.value">XMLHttpRequest</stringProp>
                              </elementProp>
                              <elementProp name="Referer" elementType="Header">
                                <stringProp name="Header.name">Referer</stringProp>
                                <stringProp name="Header.value">https://jbcxm.na15.visual.force.com/apex/CustomerSuccess360?cid=001i000000UiktnAAB</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
                            <stringProp name="scriptLanguage">javascript</stringProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">var data=prev.getResponseDataAsString();
var json=eval(data);
var sections=json[0].result.dataObj.sections;
var sid=&quot;&quot;;
for(var i=0;i&lt; sections.length;i++){
if(sections[i].name===&apos;Summary&apos;)
{
sid=sections[i].Id;
}

}
vars.put(&quot;summaryId&quot;,sid);</stringProp>
                          </BSFPostProcessor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apexremote" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&quot;action&quot;:&quot;Customer360Broker&quot;,&quot;method&quot;:&quot;customer360RequestBroker&quot;,&quot;data&quot;:[&quot;{\&quot;action\&quot;:\&quot;summary.getSummary\&quot;,\&quot;custInfo\&quot;:{\&quot;accountId\&quot;:\&quot;${accountid}\&quot;,\&quot;customerId\&quot;:\&quot;${cid}\&quot;,\&quot;section\&quot;:{\&quot;order\&quot;:1,\&quot;name\&quot;:\&quot;Summary\&quot;,\&quot;isStandardObject\&quot;:false,\&quot;label\&quot;:\&quot;Summary\&quot;,\&quot;Id\&quot;:\&quot;${summaryId}\&quot;,\&quot;type\&quot;:\&quot;Standard\&quot;,\&quot;msg\&quot;:\&quot;\&quot;,\&quot;render\&quot;:true}}}&quot;],&quot;type&quot;:&quot;rpc&quot;,&quot;tid&quot;:6,&quot;ctx&quot;:{&quot;csrf&quot;:&quot;${jcsrf}&quot;,&quot;vid&quot;:&quot;${jvid}&quot;,&quot;ns&quot;:&quot;&quot;,&quot;ver&quot;:${jver}}}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                          <stringProp name="HTTPSampler.port">443</stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                          <stringProp name="HTTPSampler.path">/apexremote</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Content-Type" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                              </elementProp>
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:25.0) Gecko/20100101 Firefox/25.0</stringProp>
                              </elementProp>
                              <elementProp name="Pragma" elementType="Header">
                                <stringProp name="Header.name">Pragma</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="Cache-Control" elementType="Header">
                                <stringProp name="Header.name">Cache-Control</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="X-User-Agent" elementType="Header">
                                <stringProp name="Header.name">X-User-Agent</stringProp>
                                <stringProp name="Header.value">Visualforce-Remoting</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate</stringProp>
                              </elementProp>
                              <elementProp name="X-Requested-With" elementType="Header">
                                <stringProp name="Header.name">X-Requested-With</stringProp>
                                <stringProp name="Header.value">XMLHttpRequest</stringProp>
                              </elementProp>
                              <elementProp name="Referer" elementType="Header">
                                <stringProp name="Header.name">Referer</stringProp>
                                <stringProp name="Header.value">https://jbcxm.na15.visual.force.com/apex/CustomerSuccess360?cid=001i000000UiktnAAB</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
                            <stringProp name="scriptLanguage">javascript</stringProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">var data=prev.getResponseDataAsString();
var json=eval(&apos;(&apos;+data+&apos;)&apos;);
var dataObjects=json[0].result.dataObj;
getFieldValue=function(key){
for(var i=0;i&lt; dataObjects.length;i++){
if(dataObjects[i][key] != null )
{
return dataObjects[i][key].value;
}
}
}

var ocd=getFieldValue(&apos;OCD&apos;);
if (ocd != null)
vars.put(&quot;S-OriginalContractDate&quot;,ocd);

var rDate=getFieldValue(&apos;RenewalDate&apos;);
if (rDate != null)
vars.put(&quot;S-RenewalDate&quot;,rDate);

var asv=getFieldValue(&apos;ASV&apos;);
if (asv != null)
vars.put(&quot;S-ASV&quot;,asv);

var mrr=getFieldValue(&apos;MRR&apos;);
if (mrr != null)
vars.put(&quot;S-MRR&quot;,mrr);

var otr=getFieldValue(&apos;OneTime&apos;);
if (otr != null)
vars.put(&quot;S-OTR&quot;,otr);

var arpu=getFieldValue(&apos;ARPU&apos;);
if (arpu != null)
vars.put(&quot;S-ARPU&quot;,arpu);

var users=getFieldValue(&apos;Users&apos;);
if(users != null)
vars.put(&quot;S-users&quot;,users);

if(vars.get(&quot;accountStatus&quot;) != &quot;not found&quot;)
vars.put(&quot;S-Status&quot;,vars.get(&quot;accountStatus&quot;));
</stringProp>
                          </BSFPostProcessor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/apexremote" enabled="true">
                          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.value">{&quot;action&quot;:&quot;Customer360Broker&quot;,&quot;method&quot;:&quot;customer360RequestBroker&quot;,&quot;data&quot;:[&quot;{\&quot;action\&quot;:\&quot;transaction.getTransaction\&quot;,\&quot;custInfo\&quot;:{\&quot;accountId\&quot;:\&quot;${accountid}\&quot;}}&quot;],&quot;type&quot;:&quot;rpc&quot;,&quot;tid&quot;:4,&quot;ctx&quot;:{&quot;csrf&quot;:&quot;${jcsrf}&quot;,&quot;vid&quot;:&quot;${jvid}&quot;,&quot;ns&quot;:&quot;&quot;,&quot;ver&quot;:${jver}}}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${SERVERNAME}</stringProp>
                          <stringProp name="HTTPSampler.port">443</stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                          <stringProp name="HTTPSampler.path">/apexremote</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Content-Type" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                              </elementProp>
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:25.0) Gecko/20100101 Firefox/25.0</stringProp>
                              </elementProp>
                              <elementProp name="Pragma" elementType="Header">
                                <stringProp name="Header.name">Pragma</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="Cache-Control" elementType="Header">
                                <stringProp name="Header.name">Cache-Control</stringProp>
                                <stringProp name="Header.value">no-cache</stringProp>
                              </elementProp>
                              <elementProp name="X-User-Agent" elementType="Header">
                                <stringProp name="Header.name">X-User-Agent</stringProp>
                                <stringProp name="Header.value">Visualforce-Remoting</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate</stringProp>
                              </elementProp>
                              <elementProp name="X-Requested-With" elementType="Header">
                                <stringProp name="Header.name">X-Requested-With</stringProp>
                                <stringProp name="Header.value">XMLHttpRequest</stringProp>
                              </elementProp>
                              <elementProp name="Referer" elementType="Header">
                                <stringProp name="Header.name">Referer</stringProp>
                                <stringProp name="Header.value">https://jbcxm.na15.visual.force.com/apex/CustomerSuccess360?cid=001i000000UiktnAAB</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
                            <stringProp name="scriptLanguage">javascript</stringProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">var data=prev.getResponseDataAsString();
var json=eval(&apos;(&apos;+data+&apos;)&apos;);
var dataObjects=json[0].result.dataObj.value.transactions.value;

getDate=function (dStr){
if(dStr != undefined &amp;&amp; dStr != null){
var date = new Date(dStr);
return (date.getMonth()+1)+&quot;/&quot;+date.getDate()+&quot;/&quot;+date.getFullYear();
}
else
return &quot;&quot;;
}

getTransDetails=function (tid){
for(var i=0;i&lt; dataObjects.length;i++){
var trn=dataObjects[i].value;
if(trn.Id == tid )
{
var bType=trn.OrderType__r.value;
if(bType != null)
vars.put(&quot;lBookingType&quot;,bType.Name);
else 
vars.put(&quot;lBookingType&quot;,vars.get(&quot;tType&quot;));

var bDate=getDate(trn.Date__c);
if (bDate != &quot;&quot;)
vars.put(&quot;lBookingDate&quot;,bDate);

var sDate=getDate(trn.RevRecStartDate__c);
if (sDate != &quot;&quot;)
vars.put(&quot;lStartDate&quot;,sDate);

var eDate=getDate(trn.RevRecEndDate__c);
if (eDate != &quot;&quot;)
vars.put(&quot;lEndDate&quot;,eDate);

var mrr=trn.MRRTotal__c;
if (mrr != null)
vars.put(&quot;lMRR&quot;,mrr);

var asv=trn.ASVTotal__c;
if (asv != null)
vars.put(&quot;lASV&quot;,asv);

var users=trn.UsersTotal__c;
if (users != null)
vars.put(&quot;lUsers&quot;,users);

var otr=trn.OneTimeRevenue__c;
if (otr != null)
vars.put(&quot;lOTR&quot;,otr);
}
}
}

getTransDetails(vars.get(&quot;prevTid&quot;));</stringProp>
                          </BSFPostProcessor>
                          <hashTree/>
                          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="writeResult" enabled="true">
                            <boolProp name="resetInterpreter">false</boolProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">import com.gs.headless.util.Output;
Output out=new Output();
&quot;S-ASV,S-MRR,S-OTR,S-users,S-ARPU,S-OriginalContractDate,S-RenewalDate,Status,BookingDate,Booking Type,MRR,ASV,StartDate,EndDate,OTR,Users&quot;;
row=vars.get(&quot;S-ASV&quot;)+&quot;,&quot;+vars.get(&quot;S-MRR&quot;)+&quot;,&quot;+vars.get(&quot;S-OTR&quot;)+&quot;,&quot;+vars.get(&quot;S-users&quot;)+&quot;,&quot;+vars.get(&quot;S-ARPU&quot;)+&quot;,&quot;+vars.get(&quot;S-OriginalContractDate&quot;)+&quot;,&quot;+vars.get(&quot;S-RenewalDate&quot;)+&quot;,&quot;+vars.get(&quot;S-Status&quot;)+&quot;,&quot;+vars.get(&quot;lBookingDate&quot;)+&quot;,&quot;+vars.get(&quot;lBookingType&quot;)+&quot;,&quot;+vars.get(&quot;lMRR&quot;)+&quot;,&quot;+vars.get(&quot;lASV&quot;)+&quot;,&quot;+vars.get(&quot;lStartDate&quot;)+&quot;,&quot;+vars.get(&quot;lEndDate&quot;)+&quot;,&quot;+vars.get(&quot;lOTR&quot;)+&quot;,&quot;+vars.get(&quot;lUsers&quot;);

out.writeActuals(vars.get(&quot;id&quot;)+&quot;,&quot;+vars.get(&quot;cName&quot;),row);</stringProp>
                          </BeanShellPostProcessor>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import com.gs.headless.util.CSVUtil;
import java.io.File;

File input = new File(&quot;renewal.html&quot;);
Document document = Jsoup.parse(input, &quot;UTF-8&quot;, &quot;http://example.com/&quot;);
vars.put(&quot;cbDate&quot;,document.select(&quot;input[name*=bookingDate]&quot;).get(0).attr(&quot;value&quot;));
vars.put(&quot;cssDate&quot;,document.select(&quot;input[name*=subscriptionStart]&quot;).get(0).attr(&quot;value&quot;));
vars.put(&quot;cseDate&quot;,document.select(&quot;input[name*=subscriptionEnd]&quot;).get(0).attr(&quot;value&quot;));
vars.put(&quot;cmrr&quot;,document.select(&quot;input[class*=recurringMRR lineItemVal]&quot;).get(0).attr(&quot;value&quot;));
vars.put(&quot;cusers&quot;,document.select(&quot;input[class*=lineItemVal lineItemUsers]&quot;).get(0).attr(&quot;value&quot;));
vars.put(&quot;cotr&quot;,document.select(&quot;input[class*=lineItemVal lineItemOnetimeRevenue]&quot;).get(0).attr(&quot;value&quot;));
vars.put(&quot;ccomments&quot;,document.select(&quot;textarea[class*=transactionComments]&quot;).get(0).text());

CSVUtil util=new CSVUtil(&quot;TransactionsData.csv&quot;);
String id=vars.get(&quot;parent&quot;);
String tText=util.getTransactionText(id);
String query=&quot;*:containsOwn(&quot;+tText+&quot;)&quot;;
		Element el=document.select(query).get(0);
		log.info(el.text());
		String[] ts=el.text().split(&quot;End Date&quot;);
		int index=-1;
		int counter=0;
		for(String t : ts){			
			if(t.contains(tText)){				
				index=counter;
				break;
			}
			counter++;			
		}
log.info(el.getElementsByTag(&quot;input&quot;).get(index).attr(&quot;name&quot;));
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
