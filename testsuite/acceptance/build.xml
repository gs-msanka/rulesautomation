<project name="Acceptance Test" default="" basedir="../../." xmlns:ivy="antlib:org.apache.ivy.ant">
	<property name="build.dir" location="${basedir}/bin" />
	<property name="result.dir" location="${basedir}/result" />
	<property name="failed.dir" location="${result.dir}/failed" />
	<property name="screenshots.dir" value="${result.dir}/screenshots" />
	<property name="failures.dir" value="${screenshots.dir}/failures" />
	<property name="ivy.file" value="${basedir}/ivy.xml" />
	<property environment="env"/>
    <property name="ws.home" value="${basedir}"/>


    <!-- TestNG file name for pre and post tests -->
	<property name="testngFileName" value="all_test.xml"/>

	<property environment="env"/>
	<property name="ivy.home" value="${basedir}/lib/ivy-2.3.0.jar"/>
	<property name="ivy.settings.file" value="${basedir}/ivy-settings.xml"/>

	<taskdef resource="org/apache/ivy/ant/antlib.xml"
			 uri="antlib:org.apache.ivy.ant">
		<classpath>
			<fileset file="${ivy.home}" />
		</classpath>
	</taskdef>

	<target name="runTest" depends="init, editPropertyFile, compile, bat, makexsltreports, zipReports"/>

    <target name="runFailedTest" depends="init, editPropertyFile, compile, failedRun, makexsltreports, zipReports"/>

	<!-- Classpath files required for compiling
	<path id="cpath">
		<fileset dir="lib">
			<include name="**/*.jar" />
		</fileset>
	</path> -->

	<target name="resolveivy">
		<ivy:settings file="${ivy.settings.file}" />
		<ivy:resolve file="${ivy.file}"/>
		<ivy:cachepath pathid="runpath" conf="default"/>
		<ivy:retrieve conf="default" pattern="${basedir}/ivy-lib/[artifact]-[type]-[revision].[ext]"/>
		<taskdef resource="testngtasks" classpathref="runpath"/>
	</target>

	<!-- Classpath files required at run-time -->
	<!--<path id="runpath">
		<fileset dir="lib">
			<include name="**/*.jar"/>
		</fileset>
		<pathelement location="${build.dir}"/>
	</path>-->
	<path id="main.classpath">
		<path refid="runpath" />
		<pathelement location="${build.dir}"/>
	</path>

	<!-- TestNG Ant Task Def -->


	<!-- Run Tests by specifying testNG file name -->
	<target name="bat" depends="">
		<echo message="Starting Acceptance Tests" />	
		<testng haltonfailure="no" classpathref="main.classpath" outputDir="${result.dir}" useDefaultListeners="true" configFailurePolicy="continue">
			<sysproperty key="run" value="BAT" />
			<sysproperty key="basedir" value="${basedir}" />

			<xmlfileset dir="testsuite/acceptance" includes="${testngFileName}"/>
		</testng>
	</target>

    <target name="failedRun" depends="">
        <echo message="Starting Acceptance Tests" />
        <testng haltonfailure="no" classpathref="main.classpath" outputDir="${result.dir}" useDefaultListeners="true" configFailurePolicy="continue">
            <sysproperty key="run" value="BAT" />
            <sysproperty key="basedir" value="${basedir}" />

            <xmlfileset dir="/var/lib/jenkins" includes="${testngFileName}"/>
        </testng>
    </target>


    <target name="compile" depends="resolveivy">
		<echo message="compiling tests" />
		<javac srcdir="src" destdir="${build.dir}" classpathref="runpath" nowarn="on" debug="on" debuglevel="lines,vars,source">
		</javac>
	</target>

	<!-- Edit Property file by replacing default values with run-time values -->
	<target name="editPropertyFile">
		<propertyfile file="${basedir}/conf/application.properties">
			<entry  key="sfdc.username" value="${sfdc.username}"/>
			<entry  key="sfdc.password" value="${sfdc.password}"/>
			<entry  key="sfdc.stoken" value="${sfdc.stoken}"/>
			<entry  key="sfdc.appurl" value="${sfdc.appurl}"/>
			<entry  key="sfdc.deleteRecords" value="${sfdc.deleteRecords}"/>
			<entry  key="sfdc.managedPackage" value="${sfdc.managedPackage}"/>
			<entry  key="sfdc.setAsDefaultApp" value="${sfdc.setAsDefaultApp}"/>
			<entry  key="sfdc.loadDefaultData" value="${sfdc.loadDefaultData}"/>
            <entry  key="sfdc.nameSpace" value="${sfdc.nameSpace}"/>
            <entry  key="sfdc.updateWidgetLayouts" value="${sfdc.updateWidgetLayouts}"/>
            <entry  key="sfdc.unInstallApp" value="${sfdc.unInstallApp}"/>
            <entry  key="sfdc.installApp" value="${sfdc.installApp}"/>
            <entry  key="sfdc.packageVersionNumber" value="${sfdc.packageVersionNumber}"/>
            <entry  key="sfdc.packagePassword" value="${sfdc.packagePassword}"/>
            <entry  key="sfdc.partnerUrl" value="${sfdc.partnerUrl}"/>
            <entry  key="sfdc.apiVersion" value="${sfdc.apiVersion}"/>
			<entry  key="browser" value="${browser}"/>
		</propertyfile>
	</target>

	<target name="init" depends="clean">
		<echo>Initializing Acceptance Test...</echo>
		<mkdir dir="${build.dir}" />
		<mkdir dir="${result.dir}" />
		<mkdir dir="${failed.dir}" />
		<mkdir dir="${screenshots.dir}" />
		<mkdir dir="${failures.dir}" />
	</target>

	<target name="clean">
		<echo>Clean up....</echo>
		<delete dir="${build.dir}" failonerror="false" />
		<delete dir="${result.dir}" failonerror="false" />
		<delete dir="${failed.dir}" failonerror="false" />
		<delete dir="${screenshots.dir}" failonerror="false" />
		<delete dir="${failures.dir}" failonerror="false" />
        <delete dir="${ws.home}/xsltReports" failonerror="false" />
	</target>

    <target name="makexsltreports">
        <mkdir dir="${ws.home}/xsltReports/output"/>
        <xslt in="${result.dir}/testng-results.xml" style="testsuite/xslt/testng-results.xsl"
              out="${ws.home}/xsltReports/output/index.html" classpathref="runpath" processor="SaxonLiaison">
            <param name="testNgXslt.outputDir" expression="${ws.home}/xsltReports/output/"/>
            <param name="testNgXslt.showRuntimeTotals" expression="true"/>
        </xslt>
    </target>

    <target name="zipReports">
        <zip destfile="${ws.home}/xsltReports/xsltReport.zip" basedir="${ws.home}/xsltReports/output"/>
        <zip destfile="${ws.home}/xsltReports/Results.zip" basedir="${ws.home}/result"/>
    </target>
</project>