Integer month = THEMONTHCHANGE;
Integer year = THEYEARCHANGE;
Date d = date.newInstance(THEYEARCHANGE, THEMONTHCHANGE, THEDAYCHANGE);
List<JBCXM__ApplicationSettings__c> appSettingsList = [SELECT ID, JBCXM__AdoptionAggregationType__c, JBCXM__AdoptionGranularity__c,
													JBCXM__AdoptionAggregationColumns__c, JBCXM__AdoptionMeasureColMap__c, JBCXM__WeekStartsOn__c,
													JBCXM__UsesEndDateAsWeekName__c from JBCXM__ApplicationSettings__c LIMIT 1];
if(appSettingsList != null && appSettingsList.Size() >0) {
    JBCXM__ApplicationSettings__c appSettingsObj = appSettingsList.get(0);
    String granularity = appSettingsObj.JBCXM__AdoptionGranularity__c;
	runBatchToAggregateAdoptionData(month, year, d, appSettingsObj, granularity);
}

public void runBatchToAggregateAdoptionData(Integer selMonth, Integer selYear, date selWeekLabel, JBCXM__ApplicationSettings__c appSettingsObj, String adoptionGranularity) {
    try {
     	Boolean isAggregationIsNeeded 	= (appSettingsObj.JBCXM__AdoptionAggregationType__c != null) ? ((appSettingsObj.JBCXM__AdoptionAggregationType__c == 'USERLEVEL' || appSettingsObj.JBCXM__AdoptionAggregationType__c == 'INSTANCEUSERLEVEL' || (appSettingsObj.JBCXM__AdoptionAggregationType__c == 'INSTANCELEVELWITHAGGREGATION' || appSettingsObj.JBCXM__AdoptionAggregationType__c == 'INSTANCELEVELWITHOUTAGGREGATION')) ? true : false) : false;
		if(isAggregationIsNeeded) {
	    	String adpAggType 	= appSettingsObj.JBCXM__AdoptionAggregationType__c.trim();
	    	String adpAggCols 	= (appSettingsObj.JBCXM__AdoptionAggregationColumns__c != null && appSettingsObj.JBCXM__AdoptionAggregationColumns__c != '') ? appSettingsObj.JBCXM__AdoptionAggregationColumns__c.trim() : '[]';
			String query		= 'SELECT Id, JBCXM__Account__c, JBCXM__CustomerName__c ';
			query				+= ''+((adpAggType == 'INSTANCEUSERLEVEL' || (adpAggType == 'INSTANCELEVELWITHAGGREGATION' || adpAggType == 'INSTANCELEVELWITHOUTAGGREGATION')) ? ', JBCXM__InstanceList__c' : '')+'';
			query				+= ' FROM JBCXM__CustomerInfo__c WHERE JBCXM__Account__c IN (SELECT JBCXM__Account__c FROM JBCXM__UsageData__c WHERE ';
			query				+= (adoptionGranularity == 'WEEKLY') ? 'JBCXM__WeekLabel__c =:  selWeekLabel AND' : '(CALENDAR_MONTH(JBCXM__Date__c) =: selMonth AND CALENDAR_YEAR(JBCXM__Date__c) =: selYear) AND ';
			query 				+= ' Name = '+((adpAggType == 'INSTANCEUSERLEVEL') ? '\'INSTANCEUSERLEVEL\'' : ((adpAggType == 'USERLEVEL') ? '\'USERLEVEL\'' : ((adpAggType == 'INSTANCELEVELWITHAGGREGATION' || adpAggType == 'INSTANCELEVELWITHOUTAGGREGATION') ? '\'INSTANCELEVEL\'' : '\'ACCOUNTLEVEL\'')) )+')';

			JBCXM.AdoptionAggregation batchApex = new JBCXM.AdoptionAggregation(query, adpAggCols, adpAggType, selMonth, selYear);
			batchApex.selWeekLabel = selWeekLabel;
			batchApex.adpGranularity = adoptionGranularity;
			ID batchprocessid = Database.executeBatch(batchApex, 1);
		}
	}
    catch(Exception e) {
    	String errMsg = 'Received a ' + e.getTypeName() + ' at line No. ' + e.getLineNumber() + ' while running batch';
    	insertLogIntoLogObject(errMsg, e.getMessage());
        throw e;
    }
}

public void insertLogIntoLogObject(string customMsg, string expMsg){
	JBCXM__Log__c errorLog = New JBCXM__Log__c(
	    JBCXM__ExceptionDescription__c = expMsg,
		JBCXM__LogDateTime__c = datetime.now(),
	    JBCXM__SourceData__c = expMsg,
	    JBCXM__SourceObject__c = 'UsageData__c',
	    JBCXM__Type__c = 'Testing Load of Adoption');
	insert errorLog;
}
