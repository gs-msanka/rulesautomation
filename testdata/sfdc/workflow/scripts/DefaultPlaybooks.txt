delete [select id from JBCXM__PlaybookTasks__c];
delete [select id from JBCXM__Playbook__c];
List<JBCXM__Playbook__c> defaultPlayBookList = new List<JBCXM__Playbook__c>();
    JBCXM__Playbook__c p1 = new JBCXM__Playbook__c();
    p1.Name = 'Collections';
    p1.JBCXM__PlayBookType__c = 'Risk';
    p1.JBCXM__Tasks_Count__c = 6;

defaultPlayBookList.add(p1);

    JBCXM__Playbook__c p2 = new JBCXM__Playbook__c();
    p2.Name = 'Loss of Power User';
    p2.JBCXM__PlayBookType__c = 'Risk';
    p2.JBCXM__Tasks_Count__c = 4;
defaultPlayBookList.add(p2);

    JBCXM__Playbook__c p3 = new JBCXM__Playbook__c();
    p3.Name = 'Loss of Exec Sponsor';
    p3.JBCXM__PlayBookType__c = 'Risk';
    p3.JBCXM__Tasks_Count__c = 5;
defaultPlayBookList.add(p3);

JBCXM__Playbook__c p4 = new JBCXM__Playbook__c();
    p4.Name = 'Late payment';
    p4.JBCXM__PlayBookType__c = 'Risk';
    p4.JBCXM__Tasks_Count__c = 6;
defaultPlayBookList.add(p4);

JBCXM__Playbook__c p5 = new JBCXM__Playbook__c();
    p5.Name = 'Low Survey Rating (NPS Detractor)';
    p5.JBCXM__PlayBookType__c = 'Risk';
    p5.JBCXM__Tasks_Count__c = 5;
defaultPlayBookList.add(p5);

JBCXM__Playbook__c p6 = new JBCXM__Playbook__c();
    p6.Name = 'NPS Promoter';
    p6.JBCXM__PlayBookType__c = 'Opportunity';
    p6.JBCXM__Tasks_Count__c = 3;
defaultPlayBookList.add(p6);

JBCXM__Playbook__c p7 = new JBCXM__Playbook__c();
    p7.Name = '120 Days Until Renewal';
    p7.JBCXM__PlayBookType__c = 'Opportunity';
    p7.JBCXM__Tasks_Count__c = 6;
defaultPlayBookList.add(p7);

JBCXM__Playbook__c p8 = new JBCXM__Playbook__c();
    p8.Name = 'Annual Review';
    p8.JBCXM__PlayBookType__c = 'Event';
    p8.JBCXM__Tasks_Count__c = 6;
defaultPlayBookList.add(p8);

JBCXM__Playbook__c p9 = new JBCXM__Playbook__c();
    p9.Name = 'Test Dynamic Owners';
    p9.JBCXM__PlayBookType__c = 'Risk';
    p9.JBCXM__Tasks_Count__c = 2;

defaultPlayBookList.add(p9);

insert 	defaultPlayBookList;

List<String> taskList = new List<String>{'Check with Finance on T&C\'s',
								'Check 360 View for usage, latest NPS score, & open cases',
								'Reach out to customer regarding delay',
								'Escalate to Business Owner/Exec Sponsor (if needed)',
								'Follow up with Finance to confirm payment commitment',
								'Confirm payment received'};
List<String> priority = new List<String>{ 'Medium', 'low','Medium', 'Medium', 'Medium', 'High'};
List<Integer> days = new List<Integer>{2, 2, 4, 7, 10, 15};
List<JBCXM__PlaybookTasks__c> pbTasks =  new List<JBCXM__PlaybookTasks__c>();
pbTasks.addAll(createTasks(taskList,p1.id,priority,days));


taskList = new List<String>{'Review usage for next highest active user',
                        'Reach out to Admin to verify replacement contact & role',
                        'Contact Business Sponsor regarding personnel changes',
                        'Train & nurture new Power User' };
priority = new List<String>{ 'Medium','Medium','Medium','Medium'};
days = new List<Integer>{3, 3, 5, 10};
pbTasks.addAll(createTasks(taskList,p2.id,priority, days));


taskList = new List<String>{'Notify internal Exec Sponsor regarding change',
					'Contact Business Owner, restate ROI & verify replacement contact - ask for introduction',
					'Make connection with new Exec Sponsor (Phone Call)',
					'Schedule Exec Business Review (EBR) with Sponsor (see EBR playbook)',
					'In EBR, reaffirm ROI & goals of partnership' };
priority = new List<String>{ 'High', 'High','High','High','High' };
days = new List<Integer>{2,4 ,7, 8 , 15};
pbTasks.addAll(createTasks(taskList, p3.id, priority, days));


taskList = new List<String>{ 'Check with Finance on T&C\'s',
				'Check 360 View for usage, latest NPS score, & open cases',
				'Reach out to customer regarding delay',
				'Escalate to Business Owner/Exec Sponsor (if needed)',
				'Follow up with Finance to confirm payment commitment',
				'Confirm payment received' };
priority = new List<String>{ 'Medium', 'Low', 'Medium','Medium','Medium','High'};
days = new List<Integer>{2, 2, 4 , 7 , 10 , 15};
pbTasks.addAll(createTasks(taskList,p4.id, priority, days));


taskList = new List<String>{'Review NPS comments & research possible source of concern',
				'Review survey responses from other respondents',
				'Contact Detractor to discuss concern & create action plan to correct/resolve',
				'Create internal plan to address customer concern',
				'Close loop with Detractor (in email and copy Business Owner)' };

priority = new List<String>{ 'High','High','High','High','High'};
days = new List<Integer>{1, 1, 2, 5, 7};
pbTasks.addAll(createTasks(taskList, p5.id, priority, days));


taskList = new List<String>{ 'Review NPS comments',
					'Verify role of person in organization',
					'Nuture based on role: (a) user/admin=invite to user group (b) exec=request marketing activity quote, case study, or press release)' };
priority = new List<String>{ 'High','High','High'};
days = new List<Integer>{2, 2, 7};
pbTasks.addAll(createTasks(taskList,p6.id, priority, days));


taskList = new List<String>{ 'Check 360 View for current usage, latest NPS score, & open cases',
				   'Research & resolve open concerns identified from 360 View analysis',
 				   'Prepare renewal paperwork',
 				    'Contact Business Sponsor to confirm renewal process',
 					'Send renewal paperwork',
 					'Upon signed renewal, close renewal opportunity & update systems' };
priority = new List<String>{ 'Medium','Medium','High','High','High','Medium'};
days = new List<Integer>{10, 10, 15, 20, 25, 115};
pbTasks.addAll(createTasks(taskList,p7.id, priority, days));


taskList = new List<String>{'Reach out to Business Owner & Exec Sponsor to schedule EBR',
                  'Review 360 View for usage, latest NPS score, & open cases',
                  'Build EBR Deck with emphasis on ROI, goals & project status',
				  'Circulate presentation internally for review (include Exec Sponsor)',
				  'Meet with customer to present findings - validate ROI and re-affirm value',
				  'Send meeting summary & action items in follow-up email' };

priority = new List<String>{ 'High','Medium','High','High','High','High'};
days = new List<Integer>{5, 5, 10, 15, 20, 22};
pbTasks.addAll(createTasks(taskList,p8.id, priority, days));

taskList = new List<String>{'Task with CTA Owner as Owner',
                  'Task With Account Owner as Owner'};

priority = new List<String>{ 'High','Medium'};
days = new List<Integer>{5, 5};
List<JBCXM__PlaybookTasks__c> pbs = createTasks(taskList,p9.id, priority, days);
    pbs[0].JBCXM__IsDynamicOwner__c=true;
    pbs[1].JBCXM__IsDynamicOwner__c=true;
	pbs[0].JBCXM__DynamicOwnerLabel__c='CTA Owner';
	pbs[1].JBCXM__DynamicOwnerLabel__c='Account ‚ûù Owner';
    pbs[0].JBCXM__DynamicOwner__c='@CTA Owner';
    pbs[1].JBCXM__DynamicOwner__c='Account#Owner.Name';
pbTasks.addAll(pbs);

insert pbTasks;

public  List<JBCXM__PlaybookTasks__c> createTasks(List<String> taskList1, String id, List<String> priority1, List<Integer> days1){
    Integer i = 0;
    List<JBCXM__PlaybookTasks__c> pbTasks1 = new List<JBCXM__PlaybookTasks__c>();
    Integer nmbr = 0;
    List<JBCXM__GSMetaInfo__c> dates=[select id from JBCXM__GSMetaInfo__c where JBCXM__SystemName__c='ASSIGN_DATE'];
    List<JBCXM__GSMetaInfo__c> skipOpts=[select id from JBCXM__GSMetaInfo__c where JBCXM__SystemName__c='Skip_all_weekends'];

    for(String name : taskList1){
            JBCXM__PlaybookTasks__c pt = new JBCXM__PlaybookTasks__c();
            pt.JBCXM__PlaybookId__c = id;
        	pt.JBCXM__Subject__c = name;
        	pt.JBCXM__Status__c = 'Open';
        	pt.JBCXM__DueDateSrc__c = dates.get(0).Id;
        	pt.JBCXM__Priority__c = priority1.get(i++);
        	pt.JBCXM__SkipOption__c = skipOpts.get(0).Id;
            pt.JBCXM__DisplayOrder__c = (++nmbr);
            pbTasks1.add(pt);
        }
    return 	pbTasks1;
}
